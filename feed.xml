<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Celoteh FachrulCH</title>
    <link href="https://blog.fachrul.id/feed.xml" rel="self" />
    <link href="https://blog.fachrul.id" />
    <updated>2019-02-23T08:52:05+07:00</updated>
    <author>
        <name>Fachrul Choliluddin</name>
    </author>
    <id>https://blog.fachrul.id</id>

    <entry>
        <title>Kiat Sukses dalam Membuat Automation Test Solution</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://blog.fachrul.id/kiat-sukses-dalam-membuat-automation-test-solution/"/>
        <id>https://blog.fachrul.id/kiat-sukses-dalam-membuat-automation-test-solution/</id>

        <updated>2019-02-22T09:57:56+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.fachrul.id/media/posts/8/pexels-photo-1020325.jpeg" alt="membuat otomasi test" />
                    Tidak sulit membayangkan manfaat dari memiliki test yang sudah di-otomatisasi (automated) yang dapat membantu proses pengujian aplikasi karena dengan adanya ia akan membuat feedback proses development menjadi jauh lebih cepat, meningkatkan efektifitas, efisiensi dan coverage pengujian, dari eksekusi test yang sering dan berulang, itu adalah sedikit-banyak manfaat dari&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://blog.fachrul.id/media/posts/8/pexels-photo-1020325.jpeg" alt="membuat otomasi test" />
                <p class="dropcap">Tidak sulit membayangkan manfaat dari memiliki test yang sudah di-otomatisasi (<em>automated</em>) yang dapat membantu proses pengujian aplikasi karena dengan adanya ia akan membuat <em>feedback</em> proses development menjadi jauh lebih cepat, meningkatkan efektifitas, efisiensi dan coverage pengujian, dari eksekusi test yang sering dan berulang, itu adalah sedikit-banyak manfaat dari <em>automated testing</em>. Seiring waktu, fitur yang ada pada sistem akan terus bertambah, QA akan melakukan pengujian mulai dari sistem/fitur yang sudah ada ditambah dengan sistem baru yang sedang dikembangkan.</p>
<p>Suatu otomatisasi test (<em>test automation</em>) mampu melakukan membuat komputer menjalankan rangkaian aktifitas yang telah dirancang untuk membandingkan hasil dari sistem apakah sesuai dengan standar yang diinginkan <em>(expected behaviour)</em> sehingga menghasilkan laporan pengujian sistem telah berhasil atau gagal</p>
<p>Dengan adanya otomatisasi test ini diharapkan baban QA menjadi ringan dalam menjalankan <em>regression test</em> yang sama berulang kali, tentu ini akan menghemat waktu QA sehingga bisa fokus ke lain hal yang memiliki <em>impact</em> yang besar dalam menjaga kualitas <em>software</em> yang baik, karena itulah perannya dalam pengembangan perangkat lunak sangat penting dan bisa membantu mencapai kesuksesan dari project</p>
<hr>
<p>Jika pengujian otomatis sudah dibuat dengan benar, seharusnya ia akan sangat menguntungkan bagi tim <em>development</em> secara keseluruhan, saya akan coba membagikan kiat dalam membuat otomasi test yang baik dan berguna, kemudian hal-hal apa saja yang harus dihindari saat membuat rangkaian pengujian otomatis ini, karena kita harus realistis, tidak semua bisa di otomatisasi komputer, ada batasan-batasan yang harus tetap di perhatikan</p>
<figure class="post__image post__image--center" ><img src="https://blog.fachrul.id/media/posts/8/pexels-photo-1020325.jpeg" width="401" height="305">
<figcaption >Membuat Robot</figcaption>
</figure>
<h2 id="mcetoc_1d4995dar0">Manual vs Automated atau Testing vs Checking</h2>
<p>Harap dihindari membanding-bandingkan dua hal ini, antara manual dengan <em>automated testing</em>, karena keduanya memiliki fungsi yang berbeda dan saling membutuhkan. Ada yang bilang <span style="text-decoration: underline;"><em>Testing = Checking + Thinking,</em></span> sehingga selayaknya disebut <strong><em>automated checking</em></strong> bukan disebut<em><strong> automated test / test automation</strong></em>, karena ia adalah pengujian berdasarkan fakta, tapi buat saya sih lebih lumrah orang lain bilang "<strong>testing</strong>" sih ya ahaha.</p>
<p>Selama <em>manual testing</em>, sisi perasaan dan nalar dari seorang <em>tester</em> akan sangat diperlukan dalam mencari titik lemah dan potensi masalah yang akan ditimbulkan dari sistem, dan seringkali proses ini tidak tidak tertulis di rencana pengujian (e<em>xploratory testing</em>) karena <em>tester</em> beradaptasi dengan hasil dari proses <em>testing</em> sehingga perlu improvisasi dalam "mengusili" aplikasi.</p>
<p>Di sisi lain <em>automated test</em> adalah hasil karya manusia juga yang berisi instruksi agar komputer bisa melalukan suatu task (dalam hal ini melakukan pengujian dari suatu hasil), nah setiap kali automated test ini dijalankan, maka ia akan melalukan kegiatan yang sama persis seperti instruksi yang dituliskan dalam kode, dan ia hanya menge-cek hal-hal yang diminta untuk di cek. </p>
<hr>
<h2 id="mcetoc_1d499b1cs1">Mulailah dari <em>automated regression test</em></h2>
<p>Tujuan utama kenapa otomasi test itu ada, adalah karena kita bosan menjalankan test yang sama berulang-ulang setiap rilis baru, <em>Regression test</em> perlu dijalankan seiringan dengan sistem yang terus berkembang, kita perlu memastikan bahwa setelah menambahkan fitur baru pada sistem tidak akan merusak fitur lainnya yang sudah ada.</p>
<p>Rangkaian test ini sangat memakan waktu dan pekerjaan yang membosankan untuk QA jalankan secara manual setiap kali, ini lah tanda-tanda <em>automation</em> diperlukan untuk menjaga konsistensi hasil pengujian, jadi regression test sangan cocok untuk mulai di otomasi</p>
<hr>
<h2 id="mcetoc_1d499crt32">Desainlah testnya dulu sebelum mulai koding</h2>
<p>Proses yang baik adalah membuat <em>user scenario,</em> <em>test cases, </em>apa yang perlu di <em>expect</em> sebelum mulai di otomasi, karena ini bisa sangat membantu dalam mencari risiko masalah pada sistem yang ditimbulkan, lalu diskusikan dengan tim juga</p>
<p>Sangat tidak disarankan ketika langsung membuat otomasi kode untuk menguji skenario positif dan <em>happy flow</em> saja, dibandingkan dengan memilikirkan dan mengidentifikasi skenario mana saja yang mungkin terjadi dan bisa ditest. </p>
<p>Jangan juga mengotomatisasi hal yang sebenarnya tidak terlalu penting untuk di kerjakan komputer, seperti misalnya kita akan menguji halaman login, definisi orang tersebut terlah berhasil login tidak perlu memastikan URL != "/login" tetapi lebih penting untuk memastikan, misalnya <em>username</em> di pojokan sudah sesuai dengan <em>login credential</em> tadi , maka dari itu perlu bantuan dari tim member lain untuk mereview desain test kita apakah sudah mencukupi dan sudah baik dalam <em>test scenario</em> dan verifikasinya (ekspektasinya)</p>
<hr>
<h2 id="mcetoc_1d499mre63">Hilangkan keraguan</h2>
<p>Satu hal yang penjadi point utama dari otomasi adalah bisa menjaga hasil yang konsistens, sehingga kita bisa tahu ketika test fail artinya ada sesuatu yang salah dan muncul anomali sistem</p>
<p>Bayangkan ketika test nya pass kemudian di jalankan lagi jadi fail, tanpa ada perubahan pada aplikasi yang di test (SUT), kita tidak pernah yakin ketika ada fail ini disebabkan oleh kesalahan kode <em>automation</em> atau <em>error</em> pada sistemnya.</p>
<p>Ketika ada <em>error</em>, kita harus periksa penyebab yang mengakibatkan <em>error</em> ini, kalau sudah banyak ditemukan inkonsistensi atau false positif akan membuat proses pengecekan error ini lama dan sulit. Jangan takut untuk menghapus test yang ga stabil seperti itu di rangkaian test kita, karena yang kita perlukan adalah hasil yang konsisten dan bisa dipercaya.</p>
<p>Perlu diperhatikan, kualitas otomatisasi test sangat tergantung dari kualitas orang yang menulisnya, bisa jadi test nya berjalan baik, semua check pass, tetapi ada kemungkinan kesalahan bisa saja muncul, tetapi komputer tidak peduli (karena diluar set ekspektasi) sehingga bisa memberikan false quality impression.</p>
<p><img class="post__image--center" src="https://blog.fachrul.id/media/posts/8/pexels-photo-955450.jpeg" alt="" width="406" height="303"></p>
<hr>
<h2 id="mcetoc_1d499or0u4">Jangan otomasi fitur yang belum stabil</h2>
<p>Sebagaimana sebuah fitur baru yang sedang dikembangkan, banyak sekali hal yang tidak mulus, bahkan seringkali saking agile nya ternyata fitur tersebut tidak lagi relevan dan di batalkan karena bisnis telah berubah dari rencana awal, sehingga otomasi menjadi sia-sia</p>
<p>Ketika proses otomasi test sudah dimulai berbarengan dengan fitur tersetbut dimulai, maka test akan sering sekali di ubah untuk bisa menyesuaikan implementasi fitur yang bergerak juga, dan ini sangat menghamburkan waktu, walaupun ada juga kok teman-teman ISQA dari <em>startup</em> lain yang sudah berhasil membuat otomasi test berbarengan dengan fitur dibuat.</p>
<p>Bagaimanapun, saya lebih condong berpendapat implementasi <em>automation </em>(khususnya UI) itu akan lebih baik dibuat ketika fitur sudah stabil dan tidak banyak berubah </p>
<hr>
<h2 id="mcetoc_1d499qr775"><strong>Jangan harap keajaiban dari otomasi</strong></h2>
<p>Jangan pernah berharap otomasi akan bisa menangkap banyak bugs, faktanya dengan manual testing jumlah bug yang ditemukan lebih banyak loh.</p>
<p>Tujuan dibuatnya <em>test automation</em> adalah untuk membantu QA dalam proses testing sehingga waktu luang QA lebih banyak dan bisa digunakan untuk memikirkan improvement proses dan menjalankan test yang sulit dan edge cases segingga bisa memberikan kepercayaan diri bagi bahwa aplikasi masih berjalan mulus dengan adanya <em>deployement</em> fitur baru</p>
<p>Rangkaian <em>regression test scenario</em> yang dijalankan secara otomatis tentu akan memberikan <em>feedback</em> lebih cepat dan bisa memberikan rasa aman bagi tim untuk <em>deploy</em> ke <em>production</em></p>
<hr>
<h2 id="mcetoc_1d499s95m6">Mengerti konteks nya</h2>
<p>Test itu bisa ada di berbagai layer, dari <em>unit test, API, service,</em> dan UI, setiap layer memiliki perbedaan tersendiri.</p>
<p>Unit test akan memastikan kode pada level class berjalan sebagaimana mestinya, sesuai dengan logic yang diharapkan, lebih mengutamakan verification ketimbang validation.</p>
<p>API test atau i<em>ntegration test</em> akan memastikan satuan function dan class bisa berjalan sesuai harapan ketika digabungkan antar class</p>
<p>UI atau<em> end to end test</em> adalah rangkaian dari interaksi perjalanan user, disini bisa dibilang UI level lebih ke validasi daripada verifikasi dalam menguji scenario user, test yang berjalan di layer ini cenderung lambat dan rawan <em>error</em>, bisa saja ada perbaikan secara  tampilan, tetapi secara usability masih sama dan tidak berubah sehingga bisa memberikan UI test dibilang error karena ternyata ada element yang berubah (css class ganti bikin element not found).</p>
<p>Dengan mengerti konteks dari setiap layer test kita akan bisa mengatur strategi otomatisasi nya, bisa jadi untuk scenario A, B, C kita akan test melalui API test, lalu hanya scenario B yang dijalankan juga pada UI test agar lebih cepat dan stabil </p>
<hr>
<h2 id="mcetoc_1d499ucbo7">Jangan repot-repot cover 100% semuanya</h2>
<p><em>Test coverage</em> 100% sangatlah sulit dicapai karena kombinasi kemungkinan yang timbul sangat beragam (<em>possible permutation</em>), ketika berbicara soal otomatisasi test semakin menambah test tidak selalu berarti manambah keyakinan akan test semakin baik. Semua itu tergantung dari sebagus apa otomatisasi pengujian di rancang.</p>
<p>Untuk membuat <em>automated scrip</em>t memerlukan sumber daya dan waktu, ketika kita ingin mengotomasi semuanya, sudah pasti perlu sumber daya dan waktu yang sangat banyak, yang mana pada kasus umumnya tidak bisa dipenuhi, pun semakin banyak test otomasi akan semakin memerlukan pemeliharaan kode yang lebih intens</p>
<p>Maka dari itu lebih baik kita buat berdasaran analisa risiko, agar bisa memilih test mana yang layak untuk di otomasi sehingga bisa sangat memberikan manfaat dalam proses testing dan dari segi skenario proses bisnis.</p>
<p>Oh ya, harap diperhatikan ga semua test bisa di otomasi, sering ada kasus test tersebut aslinya sangat kompleks sering kali hasilnya tidak konsisten, sehingga kasus ini lebih baik kita uji secara manual oleh QA, karena lebih baik kita fokus ke fitur/funcionality yang paling penting dan krusial bagi bisnis untuk di otomatisasi ketimbang mengejar full coverage. </p>
<hr>
<h2 id="mcetoc_1d49a00378">Jangan berniat menggantikan manual tester</h2>
<p>Ada saja orang yang berfikir memiliki automated test sudah cukup dan tidak perlu QA manual lagi, padahal sudah jelas untuk membuat otomatisasi, kita harus pahami dlu hasil seperti apa yang diinginkan, apa yang perlu dicek sehingga dikatakan v<em>alid outcome</em>. Proses testing itu perlu kemampuan multi disiplin seperti investigasi, detektif, psikologis sehingga kita bisa merencanakan ujicoba sekaligus meneksekusi langsung, seorang manual tester yang baik akan selalu memiliki kemampuan untuk berfikir kritis mencegah error terjadi lagi bagi pengguna </p>
<hr>
<h2 id="mcetoc_1d49a0gac9">Jangan sampai hilang kepercayaan</h2>
<p>Ini yang paling penting, kita harus mengantisipasi efek samping dari <em>test automation</em>, ketika kita sudah mencurahkan waktu dan tenaga untuk membuat rangkaian pengujian otomatis yang sempurna dan keren, tetapi ternyata menjadi sia-sia karena tidak berguna dan membantu bagi tim.</p>
<p>Bisa jadi tim tidak merasakan manfaatnya, atau bahkan tidak tahu, jadi perlu juga visibility dari rangkaian test automation solution yang kita buat, bagaimana cara mereka memakainya, lalu test apa saja yang ada di dalamnya agar tidak melakukan regression yang duplikat.</p>
<p>Jika automated test ini sering kali flaky (intermittent error), lambat dan tidak transparan, bagaimana bisa  memberikan indikasi kualitas sistem sedangkan automated test nya saja tidak berkualitas baik dan stabil.</p>
<p> </p>
<hr>
<figure class="post__image post__image--center" ><img src="https://blog.fachrul.id/media/posts/8/pexels-photo-1068523-1.jpeg" width="498" height="326">
<figcaption >we are a team</figcaption>
</figure>
<p>Rangkaian pengujian otomatis ini perlu dirawat layaknya mahluk hidup, ia terus berkembang dari waktu ke waktu, ada kalanya test tertentu sudah tidak relevan, jangan takut untuk mencopot test yang seringkali fail atau tidak memberikan hasil yang konsisten demi menjaga kredibilitas dari test automation solution kita sebagai indikator dari kualitas aplikasi/sistem.</p>
<p>Dengan mengerti batasan diatas, menurut saya peran manusia tetap berperan penting dalam proses pengujian belum bisa digantikan sepenuhnya oleh otomasi komputer, lalu kenapa kita perlu membuat otomatisasi pengujian aplikasi? alasan singkatnya adalah "<span style="text-decoration: underline;"><strong>repeatability</strong></span>",  lebih ke kolaborasi dengan adanya bantuan komputer untuk menjalankan pengujian otomatis akan membantu QA untuk bisa lebih luang dan bisa lebih fokus untuk melakukan exploratory testing untuk lebih banyak mengali risiko, dan defects.</p>
<p>Jadi, lain kali ketika kamu berencana membuat otomatisasi test, coba berfikir sejenak dan berfikir, seberapa sering test ini akan di jalankan? apakah cukup layak untuk dikerjakan manual? bagaimana sampai dikatakan test nya sukses?</p>
<p> </p>
<p class="msg msg--info"><strong>Hmm sepertinya itu saja, ada tambahan kah dari teman-teman?</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Jangan Minder Kalau Kamu adalah Manual Tester yang Tidak Bisa Koding</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://blog.fachrul.id/jangan-minder-kalau-kamu-adalah-manual-tester-yang-tidak-bisa-koding/"/>
        <id>https://blog.fachrul.id/jangan-minder-kalau-kamu-adalah-manual-tester-yang-tidak-bisa-koding/</id>

        <updated>2019-02-09T22:30:38+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.fachrul.id/media/posts/5/board-broccoli-carrots-952478.jpg" alt="" />
                    Saya pernah dengar istilah "Asahlah pisau pada sisinya yang tajam", artinya kita seharusnya fokus pada apa yang menjadi kelebihan yang dimiliki untuk menjadi lebih mahir lagi dalam hal tersebut. Untuk kamu yang pernah menonton Jiro: Dream of Sushi mungkin ada sedikit gambaran mengenai apa yang dinamakan spesialis,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://blog.fachrul.id/media/posts/5/board-broccoli-carrots-952478.jpg" alt="" />
                <p>Saya pernah dengar istilah <strong>"Asahlah pisau pada sisinya yang tajam"</strong>, artinya kita seharusnya fokus pada apa yang menjadi kelebihan yang dimiliki untuk menjadi <strong>lebih mahir</strong> lagi dalam hal tersebut. Untuk kamu yang pernah menonton <em>Jiro: Dream of Sushi</em> mungkin ada sedikit gambaran mengenai apa yang dinamakan spesialis, dunia sebenarnya membutuhkan lebih banyak orang yang sangat mahir pada suatu bidang daripada orang yang bisa banyak hal.</p>
<figure class="post__video"><iframe width="560" height="314" src="https://www.youtube.com/embed/I1UDS2kgqY8" allowfullscreen="allowfullscreen" ></iframe></figure>
<p>Spesialis disini bukan berarti menyalahi konsep T shape loh ya, justru selaras dengan itu. kita bahas lebih jauh mengenai analogi film Jiro tadi, untuk menjadi pengusaha restoran Jepang yang sukses, Jiro tidak perlu menjual sushi enak dan ramen nikmat (keahlian horizontal), tetapi cukup menyajikan sushi paling spesial saja, nah konsep T shape disini adalah dalam konteks spesialis sushi, bukan makanan Jepang secara umum, selain Jiro piwai dalam meracik sushi dia menguasai proses pemilihan bahan baku sushi yang paling prima, dari beras, tuna, ataupun sayurannya dia memiliki standard yang tinggi, dia pun menguasai cara penyajian sushi yang baik dan indah, bahkan saya dengar dia menciptakan teknik khusus untuk bisa menjaga kesegaran telur ikan yang musiman, sepanjang tahun!</p>
<p>Pun begitu dengan dunia per-testing-an sedang gandrung dengan <em>automation engineer</em> yang mampu meracik kode untuk yang bisa menggerakkan komputer yang bisa melakukan pengecekan aplikasi menjadi otomatis, tanpa perlu dilakukan oleh manusia. Banyak sekali kolega saya yang dulunya manual tester kini berlomba-lomba mempelajari bahasa pemrograman agar bisa  mengendalikan komputer untuk menjadi mesin penguji otomatis, mulai dari lini automation test website, automation mobile app hingga ke pembuatan server CI/CD yang menjadikannya terintegrasi satu sama lain. </p>
<p>Lalu timbul lah stigma kalau manual tester sudah ketinggalan jaman, hari gini ga bisa koding tuh serasa terbelakang sekali saat disandingkan dengan automation engineers (test engineer / TE). padahal faktanya gak gitu juga keles :D . Quality Assurance (manual, yang tidak bisa koding) lalu menjadi Test engineer bukanlah bentuk dari "Evolusi" seorang tester, dua pekerjaan itu memiliki <strong>disiplin ilmu yang berbeda</strong>, ga semua orang suka ngoding, menatap text editor berwarna hitam bisa saja membuat orang mual-mual, seorang QA manual yang tidak bisa koding pun bisa saja memberikan dampak yang luarbiasa bernilai dalam menjaga kualitas aplikasi kita tetap prima.</p>
<p>Jadi jika kamu merasa kurang tertarik belajar koding, jangan dulu gusar, karena ada beberapa hal yang bisa menjadi senjata pamungkas manual tester, percayalah manusia lebih piawai dalam menguji, karena kita telah dianugerahi logika berfikir, perasaan akan estetika dan memiliki ide kreatif yang unlimited dalam menguji aplikasi yang di test, ada beberapa hal berikut ini yang menurut saya bisa menjadi point-point andalan yang bisa kamu latih sebagai software quality assurance / analyst untuk tetap berperan aktif dalam meningkatkan kualitas produk kita, diantaranya:</p>
<hr>
<h2 id="mcetoc_1d39du73n3"><img class="post__image" src="https://blog.fachrul.id/media/posts/5/action-plan-brainstorming-complex-212286.jpg" alt="Photo by Startup Stock Photos from Pexels" width="5472" height="3648"></h2>
<h2 id="mcetoc_1d381jfno0">Bug Buster</h2>
<h4 id="mcetoc_1d349p3kb1">Menemukan lebih banyak bugs</h4>
<p>ini adalah tugas pokok dari seorang tester, biasanya manual tester lebih agresif dan usil dalam ngotak-ngatik aplikasinya, tidak seperti automation script yang sudah di buat alur pengujian nya sehingga komputer bisa meniru skenario yang mungkin dilakukan pengguna. Ketika komputer hanya bisa menguji hal sama yang sudah diprogram jangan terlalu berharap banyak kita menamukan bug baru yang berbeda, sesungguhnya manusia jauh lebih baik dalam menemukan bugs daripada mesin yang menguji hal yang sama berulang-ulang.</p>
<h4 id="mcetoc_1d34a1erc2">Lebih cepat memberikan timbal balik</h4>
<p>Semua orang maunya dapat jawaban lebih cepat, saat ada build baru, programmer mau tau gimana fiturnya udah OK belum. Saat ngetest aplikasi/fitur baru tentu lebih baik diserahkan oleh manusia yang punya daya nalar dan karsa yang luar biasa, sehingga bisa mencari hal-hal apa saja yang diluar batas kewajaran. Sebenarnya komputer akan lebih baik jika melakukan test fitur yang dulu-dulu (regression test). Karena dalam kasus ini, aplikasi/fitur baru biasanya belum begitu stabil dan banyak perubahan tentu manual tester akan lebih cocok, sembari TE sedang menulis code baru untuk implementasi automationnya.</p>
<h4 id="mcetoc_1d34ailtq3"> </h4>
<hr>
<h2 id="mcetoc_1d382441f2">Domain Knowledge</h2>
<p>Memahami bisnis proses adalah hal yang sangat berharga, mengetahui jawaban kenapa fitur ini ada? apakah memang ini yang user inginkan? relasi antar fitur, sangat membantu tim menemukan celah masalah yang mungkin timbul di kemudian hari, sehingga bisa menjaga tim untuk tetap men-deliver value berkualitas bagi user </p>
<h4 id="mcetoc_1d34atiu64">Pahami kebutuhan user</h4>
<p>Lihatlah cara user menggunakan aplikasi kamu, pelajari apa saja yang menjadi perhatian mereka, berempati terhadap pengguna aplikasi kita, bisa jadi pengguna kita adalah kakek-kakek yang gagap teknologi loh.</p>
<h4 id="mcetoc_1d34b8hge6">Gimana kalau...</h4>
<p>Sebelum menghadiri design meeting ataupun sprint planing, kita bisa melakukan analisa lebih lanjut tentang requirement yang akan dikerjakan tim dair PO, apakah memang fitur ini dibutuhkan user? bagaimana dengan fitur A yang kemungkinan nyenggol nantinya? gimana kalo HP nya tiba-tiba mati/hilang sinyal/server down? gimana kalau gini,, gitu? jangan takut bertanya terkait fitur tersebut, bombardir tim dengan pertanyaan "gimana kalo", karena semakin banyak kita mendapatkan skenario perilaku user di kondisi tertentu maka akan sangat mengurangi ambuitas fitur tersebut</p>
<hr>
<h2 id="mcetoc_1d3824ojs3">Technical Knowledge</h2>
<p>Pemahaman teknis itu penting sekali dalam konteks menginvestigasi masalah yang timbul, ngusilin aplikasi, troubleshooting, pelajari bagaimana sistem bekerja dalam rangka mencari kelemahan sistem secara lebih efektif, tidak perlu terlalu dalam.</p>
<p>Tetapi jangan sampai terjerat dengan sudut pandang teknis dari developer, karena terkadang seringkali ketika kita memahami kendala teknis yang timbul menjadikan tester malah kompromi dengan masalah yang timbul.</p>
<h4 id="mcetoc_1d39bkn0d0">Pelajari lebih jauh</h4>
<p>Baca buku/blog terkait testing, datangi meetup atau confrence, tonton rekaman webminar di youtube, temukanlah inspirasi untuk meningkatkan proses testing kamu, lakukan perubahan, jangan mau terjebak di rutinitas</p>
<hr>
<h2 id="mcetoc_1d3825cbk4">Communication</h2>
<p>Kemampuan berkomunikasi adalah hal kritikal bagi tester, kita harus cakap dalam menyampaikan gagasan, dan mengajukan pertanyaan. Pahami apa yang bisnis mau dengan bertanya pada Product Owner, stakeholder, developer ataupun user sebenarnya, komunikasi disini tidak melulu soal bagaimana cara kita berbicara kepada orang lain, tetapi ahli juga dalam mendengarkan untuk mendapatkan pemahaman, sudut pandang lain secara menyeluruh.</p>
<p>Sampaikanlah hal-hal yang menjadi perhatian kamu untuk dibuatkan test automatis kepada automation engineer, atau bahkan tanyakan hal apa saja yang sulit di otomatisasi komputer sehingga kita bisa tutupi di pengujian manual, lalu Developers sebenarnya sangat senang ketika bertanya, seperti pertanyaan soal bagaimana implementasi fitur itu dibuat, dan titik lemah dari implementasi itu sehingga perlu di test secara detail dan teliti. dan tanyakan bagaimana mereka mengujinya.</p>
<h4 id="mcetoc_1d34ailtq3">Lebih informatif</h4>
<p>Pahami bagaimana cara melaporkan permasalahan, jangan sampai ketika orang lain baca tiket issue/bug kita mereka mengernyitkan dahi dan bertanya langsung ke kamu, ketika developer bertanya berkali-kali ke kamu soal laporan bug, artinya ada waktu yang terbuang, waktu kamu untuk mejelaskan langsung, dan waktu dev untuk memahami maksud kamu. maka dari itu, sangat penting sekali untuk menuliskan detail permasalah saat menemukan bug. cantumkanlah hal-hal informatif seperti: software version, environment, deskripsi permasalahan dari sisi user, cara reproduce masalah itu, dan tester yang baik akan memberikan informasi dengan jelas bagaimana seharusnya itu tidak terjadi dan harapannya.</p>
<p>idealnya kamu bisa melakukan investigasi ala Sherlock Holmes dari hulu-hilir untuk menemukan tersangka penyebabnya</p>
<hr>
<h2 id="mcetoc_1d3825vqe5">Organization</h2>
<p>Mengatur prioritas, membuat rencana dan keahlian multitasking sangat erat dengan pekerjaan sehari-hari tester, sehingga seringkali dianggap remeh oleh orang lain sampai mengira testing selalu memerlukan waktu lama sampai selesai.</p>
<h4 id="mcetoc_1d39btm1a1">Bantu test engineer</h4>
<p>Kamu bukanlah orang yang mahir koding, jadi jangan terlalu memaksakan mempelajari automation framework, lebih baik kolaborasi dengan test engineer untuk bisa merancang pola otomatisasi pengecekan yang baik dan efisien, sampaikan skenario mana yang sering dijalankan, dan membosankan untuk di test manual, oh ya, jangan lupa juga berikan pula pemahaman sudut pandang dari segi bisnis ke tim engineer (developer juga termasuk)</p>
<hr>
<h2 id="mcetoc_1d382r1rs7">Emotions</h2>
<p>Sebagai tester sudah tentu kita akan terlibat dengan banyak orang, dari mulai PO, Dev, Stakeholder, bahkan user. kita harus pintar membaca karakter orang lain, sedasng dalam keadaan mood seperti apa, sehingga bisa menggunakan gaya komunikasi yang cocok</p>
<hr>
<h2 id="mcetoc_1d3826db66">Critical Thinking</h2>
<p>Berfikir kritis diperlukan untuk mencari celah masalah aplikasi. Memperhatikan detail yang timbul, mungkin tidak tampak dari luar, sehingga perlu dibongkar lebih dalam, menyambungkan titik-titik sambungan antar fitur sehingga melahirkan kombinasi baru yang belum dijaga by sistem.</p>
<h4 id="mcetoc_1d39c9v8q2">Latihan berfikir kritis</h4>
<p>Kita banyak insatal aplikasi di device kita, pernahkan kita berfikir "kok gini sih fiturnya" atau bahkan kita sering menemukan bugs saat penggunaan nya? latih terus daya kreatif kita dalam menggunakan aplikasi orang lain, dan bagaimana seharusnya fitur itu menjadi lebih baik, tester yang bagus biasanya tidak cepat puas</p>
<hr>
<p>Jadi pada intinya tidak ada yang saling menggantikan, robot belum bisa menggantikan manusia dalam test, kuncinya adalah saling bersinergi antara manual dan automation tester, karena saling memiliki sisi tajam nya masing-masing, dan tujuan akhirnya adalah "Don't find bugs, prevent bugs!"</p>
<h4 id="mcetoc_1d34atiu64"> </h4>
<h4 id="mcetoc_1d34b514r5"> </h4>
<h4 id="mcetoc_1d34b8hge6"> </h4>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Saya Software Quality Tester baru, bagaimana cara saya memulai?</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://blog.fachrul.id/saya-software-quality-tester-baru-bagaimana-cara-saya-memulai/"/>
        <id>https://blog.fachrul.id/saya-software-quality-tester-baru-bagaimana-cara-saya-memulai/</id>

        <updated>2019-02-18T23:09:06+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.fachrul.id/media/posts/4/angry-annoyed-cafe-52608.jpg" alt="pusing-belajar-qa" />
                    <h2 id="mcetoc_1d30ltv460">Salam kenal</h2>
<p>Hai.. Senang sekali mendengarnya, selamat datang di dunia yang penuh tantangan, saya bisa merasakan aroma penasaran dari kamu :) memang betul mempelajari software testing akan sangat menarik dan penuh lika-liku, tapi tenang saja kamu berada di sumber yang (semoga saja) tepat. 😅</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://blog.fachrul.id/media/posts/4/angry-annoyed-cafe-52608.jpg" alt="pusing-belajar-qa" />
                <h2 id="mcetoc_1d30ltv460">Salam kenal</h2>
<p>Hai.. Senang sekali mendengarnya, selamat datang di dunia yang penuh tantangan, saya bisa merasakan aroma penasaran dari kamu :) memang betul mempelajari software testing akan sangat menarik dan penuh lika-liku, tapi tenang saja kamu berada di sumber yang (semoga saja) tepat. 😅</p>
<hr>
<h2 id="mcetoc_1d30lufqm1">Overdosis informasi</h2>
<p>Dengan adanya internet seharusnya semua akan lebih mudah belajar dan cepat menguasainya, tapi nyatanya banyak juga loh artikel sampah yang malah bikin kamu bingung, apalagi dalam tahap pemula, kamu akan dihadapi dengan banjirnya informasi yang akan bikin kamu merasa terlalu banyak yang harus dipelajari sekaligus. Tanamkan pemikiran "Ga semua yang di internet itu benar" kadang apa yang kita gugling belum tentu baik untuk diimplementasi ke kita juga. Jangan puas dari apa yang dituliskan disitu, tetaplah kritis bertanya.</p>
<p>Hmmm.. Maka dari itu saya akan coba runut kan apa saja sebenernya yang bisa kamu pelajari di awal karir sebagai tester, kebanyakan materi yang saya bagikan nanti adalah buku ataupun online course (video), karena menurut saya ini adalah materi terbaik, dimana kamu belajar secara runut dan bertahap, tidak seperti dari posting blog ataupun stackoverflow result yang memiliki informasi tercecer dan langsung ke intinya.</p>
<figure class="post__image post__image" ><img src="https://blog.fachrul.id/media/posts/4/adult-business-businessman-374820.jpg" alt="belajar yuk" width="5760" height="3840">
<figcaption >source: <a href="https://www.pexels.com/photo/man-using-ballpoint-pen-374820/">https://www.pexels.com/photo/man-using-ballpoint-pen-374820/</a></figcaption>
</figure>
<h3 id="mcetoc_1d30lvdhv2">Rekomendasi materi belajar Software Quality</h3>
<p>Disclaimer: ini subjektif pengalaman saya (@fahcrulCH) saja ya, mungkin tidak lengkap karena memang pengetahuan dan bacaan saya terbatas :) mohon informasinya apabila teman-teman punya referensi bagus, oh iya list ini pun akan sering saya update ketika menemukan sumber baru yang relevan</p>
<h4 id="mcetoc_1d31n0dcn0">Oke, kita mulai belajar dari mana nih?</h4>
<p>Hmm sepengalaman saya, belajar bareng itu lebih asyik daripada belajar sendiri, maka dari itu kita harus join ke komunitas agar bisa interaksi tanya jawab juga dengan orang lain yang sudah pengalaman</p>
<ul>
<li>Indonesia Software Quality Assurance
<ul>
<li>Official page: <a href="http://www.isqa.club/">http://www.isqa.club/</a> </li>
<li>Meetup: <a href="https://www.meetup.com/Indonesia-Software-Quality-Assurance/">https://www.meetup.com/Indonesia-Software-Quality-Assurance/</a></li>
<li>Telegram: <a href="https://t.me/sqa_id">https://t.me/sqa_id</a></li>
<li><a href="https://www.youtube.com/channel/UC0ovCwgq4FKXfoF0kEV6XMQ">YouTube</a></li>
</ul>
</li>
<li>QA Malang
<ul>
<li>Blog dan Artikel: <a href="https://medium.com/qa-malang">https://medium.com/qa-malang</a> </li>
<li>Sosmed: <a href="https://www.instagram.com/qamalang/">https://www.instagram.com/qamalang/</a> </li>
</ul>
</li>
<li>Ministry of Testing 
<ul>
<li>forum: <a href="https://club.ministryoftesting.com/">https://club.ministryoftesting.com/</a></li>
<li>pelatihan: <a href="https://www.ministryoftesting.com/dojo">https://www.ministryoftesting.com/dojo</a></li>
</ul>
</li>
</ul>
<h4 id="mcetoc_1d31n8dtj1">Saya sudah join di komunitas diatas, dan beberapa kesempatan juga sudah tanya ini-itu, lalu apa lagi?</h4>
<p>Nah kali ini kita masuk ke pembelajaran bagaimana menjadi seorang tester yang mumpuni, tentu ada berbagai latihan untuk mengasah jurus-jurus jitu dalam menjaga dunia aplikasi tetap kondusif dan prima di user.</p>
<ul>
<li>Kursus online (yang gratis :)
<ul>
<li><a href="https://www.guru99.com/software-testing.html">guru99 - software testing</a> </li>
<li><a href="https://www.guru99.com/agile-testing-course.html">guru99 - agile testing</a></li>
<li><a href="https://www.guru99.com/mobile-testing.html">guru99 - mobile testing</a></li>
<li><a href="https://www.udacity.com/course/software-analysis-testing--ud333">Software Analysis &amp; testing by Google</a> (📹)</li>
<li><a href="https://www.oreilly.com/library/view/agile-testing-essentials/9780134683287/">Agile testing essensial</a> (📹, 💵)</li>
</ul>
</li>
<li>Rekomendasi buku testing:<br>
<ul>
<li><a href="https://www.bukalapak.com/p/hobi-koleksi/buku/teknik/lqmmjr-jual-e-book-otomatisasi-pengujian-perangkat-lunak-atau-software-testing-automation?from=product_owner&amp;product_owner=normal_seller">Otomatisasi Pengujian Perangkat Lunak Atau Software Testing Automation </a> (📖, rekomendasi, penyusunan buku yang bagus dari konsep testing sampai membuat automation framework, berbahasa indonesia pula)</li>
<li><a href="https://leanpub.com/howtobeatester">How To Be A Tester</a>  (📖, membahas cara penulis menjadi seorang tester secara kebetulan)</li>
<li><a href="https://www.oreilly.com/library/view/more-agile-testing/9780133749571/">More agile testing</a> (💵, prinsip dari agile testing)</li>
</ul>
</li>
</ul>
<p>Satu hal lagi, akan lebih baik kalo kamu mempersiapkan untuk mengambil sertifikasi ISTQB (mahal sih, tapi minimal memahami konsep nya), untuk belajar ISTQB bisa melalui:</p>
<ul>
<li><a href="https://www.oreilly.com/library/view/software-testing-/9781780172996/">Software Testing - An ISTQB-BCS Certified Tester Foundation guide</a> (📖, 💵 panduan mempelajari ISTQB yang bagus)</li>
<li><a href="https://www.oreilly.com/library/view/advanced-software-testing/9781457189517/">Advanced Software Testing - Vol. 1</a> (📖, 💵 belajar lebih mendalam)</li>
<li><a href="https://www.oreilly.com/library/view/software-testing-foundations/9781492001454/">Software Testing Foundations</a> (📖, 💵 konsep testing)</li>
</ul>
<h4 id="mcetoc_1d32dulk41">Sebenarnya saya males baca sih, ada cara lain buat belajar?</h4>
<p>oke saya paham, memang cara belajar setiap orang bisa beda-beda, ada yang visual, audio, bahkan kinetik, ada sih beberapa hal rekomendasi untuk belajar selain membaca seperti:</p>
<ul>
<li>kursus testing
<ul>
<li><a href="https://www.idstb.org/training.html">Indonesia Software Testing Board (IDSTB)</a> ada bayak kursus dan ujian sertifikasi disini loh</li>
</ul>
</li>
<li>podcast software testing
<ul>
<li><a href="https://testingpodcast.com/" rel="nofollow">Ragam testing podcast</a></li>
<li><a href="https://joecolantonio.com/testtalks/" rel="nofollow">test talks</a> (favorit saya)</li>
<li><a href="https://www.angryweasel.com/ABTesting/">AB testing</a> (ini juga bagus)</li>
<li><a href="http://testinginthepub.co.uk/testinginthepub/" rel="nofollow">testinginthepub</a></li>
<li><a href="https://soundcloud.com/ministryoftesting" rel="nofollow">ministry of testing</a></li>
<li><a href="http://pythontesting.net/test-podcast" rel="nofollow">Python testing</a></li>
</ul>
</li>
<li>video
<ul>
<li>T<a href="https://testautomationu.applitools.com/">est Automation University</a> (📹, kuliah gratis loh)</li>
<li>Rekomendasi Youtube channel 📹:
<ul>
<li><a href="https://www.youtube.com/channel/UCO1aucBAJgFR8odzfXOZ5uw/featured">Sekolah Koding</a></li>
<li><a href="https://www.youtube.com/channel/UCO1aucBAJgFR8odzfXOZ5uw/featured">Execute Automation</a></li>
<li><a href="https://www.youtube.com/channel/UCzUaF3G8L5rfoh9xR6a51kg">SauceLabs</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Tapi saran saya sih tetap mempelajari lewat buku, ga mesti harus full satu buku dibaca semua kok, kita bisa lihat daftar isi terus lompat ke topik yang paling menarik buat dipelajari, atau metode membaca secara scanning biar cepat, karena faktanya "too many books, so little time" </p>
<h3 id="mcetoc_1d30m0aul3">Rekomendasi materi belajar Software Quality Engineer (QA Automation)</h3>
<p>Materi berikut adalah pengembangan dari materi diatas (manual QA) dimana kamu sudah mulai familiar dengan exploratory testing dan mengerti apa yang harus di uji secara manual, lalu ingin mengembangkan karir menjadi seorang Software Quality Engineer / Software Development Engineer in Test (SDET)</p>
<h4 id="mcetoc_1d31nihh32">Bagaimana menjadi Software Quality Engineer (SDET) ?</h4>
<p>Emang udah lancar testing manual? kalo begitu mari kita belajar automation agar kita bisa mendelegasikan komputer untuk melakukan checking</p>
<p>Oh iya, untuk menguasai automation, tentu kita harus bisa ngoding, minimal ngerti algoritma, percabangan, pengulangan, ya kurang lebih basic bahasa pemrograman dahulu, baru lanjut ke implementasi tools automation (yang umumnya ngoding script selenium)</p>
<p>Konsep:</p>
<ul>
<li><a href="https://leanpub.com/testingindevops">A Practical Guide to Testing in DevOps </a> (📖, tantangan testing di era devops)</li>
<li><a href="https://testautomationu.applitools.com/setting-a-foundation-for-successful-test-automation/index.html">Setting a foundation for successful test automation</a> (📹, kuliah gratis)</li>
<li><a href="https://www.oreilly.com/library/view/the-way-of/9781680502251/">The Way of the Web Tester</a> (📖, 💵 buku yang menyenangkan untuk di baca, banyak ilustrasi lucu juga)</li>
</ul>
<p>Kursus pemrograman (jurus dasar koding):</p>
<ul>
<li><a href="http://codingdojo.org/">CodingDojo</a></li>
<li><a href="https://www.sekolahkoding.com/" rel="nofollow">Sekolah koding</a></li>
<li><a href="https://www.codepolitan.com/interactive-coding" rel="nofollow">Codepolitan</a></li>
<li><a href="https://www.dicoding.com/" rel="nofollow">Dicoding</a></li>
<li><a href="https://kelaskita.com/index/kategori/pemrograman/" rel="nofollow">KelasKita</a></li>
<li><a href="https://books.goalkicker.com">Buku menguasai berbagai bahasa pemrograman </a> </li>
<li><a href="https://github.com/EbookFoundation/free-programming-books">Repo sumber bahasa pemrograman</a></li>
</ul>
<p>Automation tools:</p>
<ul>
<li><a href="https://www.oreilly.com/library/view/selenium-fundamentals/9781789804638/">Selenium Fundamentals</a></li>
<li>TDD/Unit test:<br>
<ul>
<li><a href="https://learntdd.in/">Learn TDD</a> (tdd backend, frontend. gratis)</li>
</ul>
</li>
<li>Automation website: 
<ul>
<li><a href="https://www.guru99.com/selenium-tutorial.html">guru99 - selenium tutorial</a> (kursus online, gratis)</li>
</ul>
</li>
<li>Automation REST API/Web service:
<ul>
<li><a href="https://leanpub.com/testrestapi">Automation REST API</a> (📖, berbayar)</li>
<li><a href="https://www.youtube.com/watch?v=TeAU1n9UspI&amp;list=PL6tu16kXT9PpgqfMbMdzUzDenYgb0gbk0">API testing with RestAssured</a> (📹, gratis)</li>
<li><a href="https://testautomationu.applitools.com/exploring-service-apis-through-test-automation/index.html">Exploring service apis through test automation</a> (📹, gratis)</li>
</ul>
</li>
<li>Mobile app automation</li>
<li>Terkait server/devops:
<ul>
<li><a href="https://testautomationu.applitools.com/scaling-tests-with-docker/index.html">Scaling Tests with Docker</a> (📹, gratis)</li>
</ul>
</li>
<li>Advance Testing:
<ul>
<li>Performance testing</li>
<li>Security testing</li>
<li>Testing documentation</li>
</ul>
</li>
</ul>
<h4 id="mcetoc_1d31o7bn67"> Mantap, saya sudah menguasai kebanyakan tools diatas, bahkan sekarang saya sudah memimpin tim QA loh, adakah yang bisa saya pelajari lagi?</h4>
<p>Wuiih hebat, tentu ada, jangan berhenti belajar ya, karena tidak tahu belajar apa artinya stagnan, maka dari itu yuk kita pelajari lebih jauh bagaimana mengatur tim kita.</p>
<ul>
<li><a href="https://www.oreilly.com/library/view/the-expert-test/9781492018742/">The Expert Test Manager </a> (📖, 💵)</li>
<li><a href="https://www.safaribooksonline.com/library/view/optimizing-selenium-test/9781788476522/">Optimizing Selenium Test Performance</a> (📹,💵)</li>
<li><a href="https://www.safaribooksonline.com/library/view/design-a-selenium/9781789131048/">Design a Selenium Test Framework from Scratch-Architect level</a> (💵)</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Karir sebagai software quality assurance / tester itu keren banget!</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://blog.fachrul.id/karir-sebagai-software-quality-assurance-tester-itu-keren-banget/"/>
        <id>https://blog.fachrul.id/karir-sebagai-software-quality-assurance-tester-itu-keren-banget/</id>

        <updated>2019-02-18T23:09:31+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://blog.fachrul.id/media/posts/3/checking.jpeg" alt="checking app" />
                    Jika kamu adalah mahasiswa yang akan/baru lulus dan mulai mencari-cari lowongan kerja di bidang software development, mungkin bisa dipertimbangkan lowongan sebagai Software tester/QA sebagai pilihan karir yang bagus. Kenapa begitu? Oke mari saya tunjukan kenapa menjadi seorang software tester itu sangat menarik. Sebagai gambaran, saya&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://blog.fachrul.id/media/posts/3/checking.jpeg" alt="checking app" />
                <p id="fdf7" class="graf graf--p graf-after--h3">Jika kamu adalah mahasiswa yang akan/baru lulus dan mulai mencari-cari lowongan kerja di bidang software development, mungkin bisa dipertimbangkan lowongan sebagai Software tester/QA sebagai pilihan karir yang bagus. Kenapa begitu? Oke mari saya tunjukan kenapa menjadi seorang software tester itu sangat menarik.</p>
<p id="17be" class="graf graf--p graf-after--p graf--trailing">Sebagai gambaran, saya sendiri memulai karir di dunia tech sebagai software tester secara tidak sengaja, karena memang sedari kuliah tidak tahu ada roles software tester di industri pengembangan aplikasi komputer, tapi nyatanya sampai sekarang saya tidak menyesal mengambil pilihan software testing sebagai karir saya.</p>
<hr>
<h3 id="c76d" class="graf graf--h3 graf--leading">Apa itu software tester/software quality assurance secara sederhana?</h3>
<p id="6769" class="graf graf--p graf-after--h3">Sebagai pembuat aplikasi teknologi, kita tentu ingin mempersembahkan pengalaman terbaik bagi pengguna, nah tester disini akan mencoba aplikasi baru sebelum pengguna sesungguhnya, agar nantinya tim bisa mencapai standar mutu terbaik</p>
<p id="1123" class="graf graf--p graf-after--p">Alasan-alasan nyata kenapa software tester/software QA adalah pilihan karir yang keren</p>
<h3 id="e083" class="graf graf--h3 graf-after--figure">Semua berlomba menjadi digital</h3>
<p id="cac7" class="graf graf--p graf-after--h3">Jaman now, semua kebutuhan kita sudah mulai tersedia dalam genggaman, dari mencari berita, beli makanan, transfer uang, kursus dan lain-lain sudah serba online, ini karena imbas dengan banyaknya perusahaan startup yang berdiri. Akan selalu ada pilihan untuk layanan online yang bisa kita gunakan, tetapi selalu yang terbaiklah yang akan bertahan. Nah bagaimana layanan itu mencapai yang terbaik? Jawabanya adalah dengan selalu memberikan layanan berkualitas bagi pengguna. Disinilah alasan kenapa lowongan sebagai tester/QA selau ada.</p>
<figure id="004e" class="graf graf--figure graf-after--p">
<div class="aspectRatioPlaceholder is-locked">
<div class="aspectRatioPlaceholder-fill"> </div>
<div class="progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded"    ><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas" width="75" height="47"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1600/0*D6hpkzWJNtPtajrp.png" ></div>
</div>
<figcaption class="imageCaption">sumber gambar: <a href="http://fintechnews.sg/4814/indonesia/new-fintech-report-highlights-indonesias-untapped-opportunity/"  class="markup--anchor markup--figure-anchor" rel="nofollow noopener noreferrer" target="_blank">http://fintechnews.sg/4814/indonesia/new-fintech-report-highlights-indonesias-untapped-opportunity/</a></figcaption>
</figure>
<h3 id="11af" class="graf graf--h3 graf-after--figure">Bayaran nya bagus</h3>
<p id="677f" class="graf graf--p graf-after--h3">Banyak mitos yang beredar, kalo karir sebagai tester/QA itu bayarannya lebih sedikit daripada menjadi developer, tapi percayalah ini tidak benar. Sebagai fresh graduate/karir pertama, tentu profesi sebagai tester atau developer memiliki standar gaji yang sama, seiring berjalan waktu, semakin bertambah kemampuan kamu, maka pendapatan yang kamu terima pun semakin besar, karena perusahaan pun akan melihat kemampuan kamu sebagai aset masa depan. Apalagi kalau kamu menguasai automation test, kamu bisa jadi lebih cepat naik gajinya ahaha</p>
<figure id="fb01" class="graf graf--figure graf-after--p">
<div class="aspectRatioPlaceholder is-locked">
<div class="aspectRatioPlaceholder-fill"> </div>
<div class="progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded"      ><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas" width="75" height="53"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1600/1*K3zdDg0J2XlxqLpLMfB8Ug.png" ></div>
</div>
<figcaption class="imageCaption">techinasia job, diakses 7-des-2018 19.00</figcaption>
</figure>
<h3 id="bacb" class="graf graf--h3 graf-after--figure">Relatif lebih mudah bagi kamu untuk menjadi tester/SQA</h3>
<p id="cfc6" class="graf graf--p graf-after--h3">Coba lihat deh lowongan yang banyak beredar, apakah kriteria menjadi seorang software tester/SQA? Biasanya bahkan bisa aja menerima dari jurusan TI loh, karena dari segi tester pun ada yang menjadi manual tester ataupun automation tester. Kalau manual tester umumnya kemampuan menganalisa masalah yang menjadi kebutuhan besar, kalau automation tester kamu harus senang dengan koding, tapi koding yang ada di tester ga terlalu komplex seperti developer sih menurut saya. Relatif :P</p>
<h3 id="b253" class="graf graf--h3 graf-after--p">Perpindahan dari developer ke testing jauh lebih mudah</h3>
<p id="4f5f" class="graf graf--p graf-after--h3">Pernah ngerasa bosen ngelihat kode terus? Pindah jadi tester juga seru loh! Karena kamu akan mulai berfikir lebih ekploratif, deduktif, sebab-akibat seperti layaknya detektif partikelir sedang menganalisa kasus hilang nya data transaksi akibat bug yang berkeliaran :D</p>
<p id="bef1" class="graf graf--p graf-after--p">Apalagi jika dengan latar sebagai developer kamu akan memiliki keuntungan karena tahu betul bagaimana aplikasi dibuat, sehingga bisa memverifikasi aplikasi sudah dibangun dengan benar. Belum lagi kamu akan lebih mudah mempelajari automation tools macam selenium, karena sudah memahami cara kerja kode.</p>
<h3 id="7c3b" class="graf graf--h3 graf-after--p">Ilmu yang mudah dipelajari</h3>
<p id="4041" class="graf graf--p graf-after--h3">Alat untuk membantu testing banyak yang sudah memiliki tampilan bagus kok, seperti postman, katalon studio, apalagi dengan googling sedikit kita bisa mempelajari konsep testing dari dasar hingga mahir, dari ISTQB hingga BDD cucumber</p>
<h3 id="0994" class="graf graf--h3 graf-after--p">Tidak pusing dengan tools</h3>
<p id="51dc" class="graf graf--p graf-after--h3">Jika kamu developer tentu familiar dengan banyaknya library dan framework yang ada diluar sana, apalagi jika kamu adalah javascript developer, sepertinya setiap hari selalu saja ada library/framework yang lahir dan banyak dibicarakan komunitas. Tapi tren seperti itu relatif tidak terjadi di dunia testing. Konsep testing jarang berubah, tools/libarary pun didominasi oleh teknologi yang serupa, selenium mungkin library yang penting, tinggal selera saja pilih bahasa pemrograman apa untuk pilih library menjalankan selenium, dan selama 3 tahun terakhir pun tidak banyak berubah</p>
<figure id="e7dc" class="graf graf--figure graf-after--p">
<div class="aspectRatioPlaceholder is-locked">
<div class="aspectRatioPlaceholder-fill"> </div>
<div class="progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded"       ><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas" width="75" height="50"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1600/0*dXTFPRBC3mZm65Ko" ></div>
</div>
<figcaption class="imageCaption">Photo by <a href="https://unsplash.com/@markusspiske?utm_source=medium&amp;utm_medium=referral"  class="markup--anchor markup--figure-anchor" rel="photo-creator nofollow noopener noreferrer" target="_blank">Markus Spiske</a> on <a href="https://unsplash.com/?utm_source=medium&amp;utm_medium=referral"  class="markup--anchor markup--figure-anchor" rel="photo-source nofollow noopener noreferrer" target="_blank">Unsplash</a></figcaption>
</figure>
<h3 id="3a08" class="graf graf--h3 graf-after--figure">Mengembangkan sayap</h3>
<p id="f8e3" class="graf graf--p graf-after--h3">Ketika kamu telah memiliki kemampuan yang mumpuni di dunia testing atau SQA, menurut saya sangat mudah ketika memutuskan untuk menjalani karir sebagai business analyst, product owner, scrum master bahkan devops. Karena secara umum kamu sudah :</p>
<ul class="postList">
<li id="f811" class="graf graf--li graf-after--p">Menguasai seluk beluk aplikasi, dari segi bisnis, koding, dan user</li>
<li id="1961" class="graf graf--li graf-after--li">Kemeampuan komunikasi yang baik</li>
<li id="bc31" class="graf graf--li graf-after--li">Lancar dalam menyampaikan gagasan yang mudah dimengerti oleh developer, product owner, dan stake holder</li>
</ul>
<figure id="f182" class="graf graf--figure graf-after--li graf--trailing">
<div class="aspectRatioPlaceholder is-locked">
<div class="aspectRatioPlaceholder-fill"> </div>
<div class="progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded"      ><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas" width="75" height="31"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" src="https://cdn-images-1.medium.com/max/1600/1*jXJdjxgD1tFhIcgx2HkfXw.png" ></div>
</div>
<figcaption class="imageCaption">Jenjang karir (Tegar, sumber: <a href="http://www.isqa.club/?p=280"  class="markup--anchor markup--figure-anchor" rel="nofollow noopener noreferrer" target="_blank">http://www.isqa.club/?p=280</a>)</figcaption>
</figure>
            ]]>
        </content>
    </entry>
</feed>
