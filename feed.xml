<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Celotehan si FachrulCH</title>
    <link href="https://fachrul.id/feed.xml" rel="self" />
    <link href="https://fachrul.id" />
    <updated>2021-01-29T17:23:26+07:00</updated>
    <author>
        <name>Fachrul Choliluddin</name>
    </author>
    <id>https://fachrul.id</id>

    <entry>
        <title>Struktur Framework dan Fluent Assertion - API Test Framework Python (Bagian 3)</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/api-test-framework-python-struktur-framework-dan-fluent-assertion-bagian-3/"/>
        <id>https://fachrul.id/api-test-framework-python-struktur-framework-dan-fluent-assertion-bagian-3/</id>

        <updated>2021-01-29T17:11:57+07:00</updated>
            <summary>
                <![CDATA[
                     Hi Kawan ðŸ‘‹, Gimana mudah kan belajar bikin API automation dengan python? tentunya,, di kesempatan ini kita akan belajar lebih lanjut dengan pytest dan menggunakan library tambahan (lagi) agar test kita lebih mudah dibaca dan dipahami dengan bantuan fluent assertion Artikel ini adalah salah&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Â </p>
<p>Hi Kawan ðŸ‘‹,</p>
<p>Gimana mudah kan belajar bikin API automation dengan python? tentunya,, di kesempatan ini kita akan belajar lebih lanjut dengan pytest dan menggunakan library tambahan (lagi) agar test kita lebih mudah dibaca dan dipahami dengan bantuan fluent assertionÂ </p>
<p>Artikel ini adalah salah satu dari rangkaian tutorial cara membuat RestfulAPI Test Framework dengan bahasa pemrograman Python, artikel lainnya bisa kamu cekidot disini ya:</p>
<ul>
<li><a href="https://fachrul.id/yuk-belajar-cara-membuat-api-test-automation-framework-python-bagian-1/" target="_blank" rel="noopener noreferrer">PelajaranÂ 1:Â  Setup dan pengenalan HTTP requests</a></li>
<li><a href="https://fachrul.id/api-test-automation-framework-python-bagian-2/" target="_blank" rel="noopener noreferrer">Pelajaran 2: Pengujian dengan assert dan pytest</a></li>
<li><a href="https://fachrul.id/api-test-framework-python-struktur-framework-dan-fluent-assertion-bagian-3/" target="_blank" rel="noopener noreferrer">Pelajaran 3: Struktur awal test framework dan library fluent assertion</a></li>
<li><a href="https://fachrul.id/refactoring-dan-base-api-api-test-framework-python-bagian-4/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 4: Refaktoring dan base helper</a></li>
<li><a href="https://fachrul.id/reporting-api-test-framework-python-bagian-5/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 5: Reporting</a></li>
<li><a href="https://fachrul.id/json-schema-validation-api-test-framework-python-extra-bonus/" target="_blank" rel="noopener noreferrer">Extra: Penambahan schema validation dan running test in parallel</a></li>
</ul>
<hr>
<h2 id="mcetoc_1et6ojupi0">Kenapa kita perlu fluent assertion?</h2>
<p>Karena assert terlalu sederhana, dia hanya bisa mengevaluasi value True/False saja,, (eh tapi pada dasarnya semua juga sama sih mau pake library ini pun gitu, hahaha)</p>
<p>Maksudnya ada banyak fitur tambahan dari library ini, bisa dilihat dokumentasinya di web resminyaÂ <a href="https://github.com/assertpy/assertpy">https://github.com/assertpy/assertpy</a>Â dan secara kode pun akan mudah dibaca dan dipahami kok</p>
<p>Install library ini dengan command `pip install assertpy`</p>
<h2 id="mcetoc_1et6oq45a2">Mengakses API method POST</h2>
<p>Oke kali ini kita ga akan pake GET airports lagi sebagai contoh, tapi kita akan menggunakan contoh API POST untuk menghitung jarak antar airports ya, kurang lebih kode nya akan seperti ini</p>
<pre>import requests<br>from assertpy import assert_that<br><br><br>def test_calculate_distance():<br>    payload = {<br>        "from": "LAE",<br>        "to": "NRT"<br>    }<br>    response = requests.post("https://airportgap.dev-tester.com/api/airports/distance", data=payload)<br>    data = response.json().get("data")<br>    assert_that(data["type"]).is_equal_to("airport_distance")<br>    assert_that(data["attributes"]).is_not_empty()<br>    assert_that(data).has_id("LAE-NRT")<br>    assert_that(data["attributes"]["kilometers"]).is_equal_to(4753.834755437252)</pre>
<p>Â Penjelasan kode, yang beda aja dari artikel sebelumnya ya hehe:</p>
<ul>
<li>from assertpy import assert_that ==&gt; melakukan import function assert_that yang berada pada module library assertpy</li>
<li>payload = {} ==&gt; deklarasi variable dengan tipe data dictionary</li>
<li>response = requests.post(&lt;url&gt;, data) ==&gt; nah seperti pada umumnya method POST adalah untuk mengirim data, maka kita akan mengirim data payload secara programatis dengan menggunakan argument tambahan data=payload</li>
<li>assert_that(&lt;condition&gt;).is_equal_to(&lt;expected result&gt;) ==&gt; penggunaan assertpy library untuk assertion, lihatlah kodenya jadi mudah dipahami bukan?</li>
</ul>
<hr>
<h2 id="mcetoc_1et6p6r1a3">Struktur Framework pytest</h2>
<p>Pada umumnya kode pengujian pada sebuah project python terletak pada directory `test` atau `tests`Â jadi untuk standarisasi kita akan mengikuti kaidah ini, sehingga bentuk project test kita menjadi seperti ini</p>
<pre>.<br>â””â”€â”€ test<br> â”œâ”€â”€ airport_test.py<br> â””â”€â”€ favorite_test.py</pre>
<p>Oia, sebagai convention pun kita perlu menamakan file kita dengan _test.py agar pytest bisa menemukan file mana saja yang akan dieksekusi sebagai test</p>
<p>Kita membagi dua file utnuk pengujian api yang berkaitan dengan airport dan favorite ke dalam file yang terpisah agar mudah dipahami, jadi semua test yang berkaitan dengan module favorite pasti terletak di favorite_test.py jadi test kita pun bisa menjadi sebuah dokumentasi yang baik</p>
<p>Kurang lebih contoh akhir dari file airport_test.py adalah seperti ini</p>
<pre>import requests<br>from assertpy import assert_that<br><br>BASE_URL = "https://airportgap.dev-tester.com/api"<br><br><br>def test_get_all_airports():<br>    response = requests.get(f'{BASE_URL}/airports')<br>    data = response.json().get('data')<br><br>    assert_that(response.status_code).is_equal_to(200)<br>    assert_that(data).is_greater_than_or_equal_to(5)<br><br><br>def test_get_airports_by_id():<br>    # arrange/GIVEN<br>    airport_id = "LAE"<br>    # action/WHEN<br>    response = requests.get(f'{BASE_URL}/airports/{airport_id}')<br>    data = response.json().get('data')<br>    data_airport = data["attributes"]<br>    # assertion/THEN<br>    assert_that(response.status_code).is_equal_to(200)<br>    assert_that(data_airport["name"]).is_equal_to("Nadzab Airport")<br><br><br>def test_get_not_found_airport():<br>    airport_id = "NOTFOUND"<br>    response = requests.get(f'{BASE_URL}/airports/{airport_id}')<br>    assert_that(response.status_code).is_equal_to(404)<br>    assert_that(response.json()).contains_key("errors")<br>    assert_that(response.text).contains("The page you requested could not be found")<br><br><br>def test_calculate_distance():<br>    payload = {<br>        "from": "LAE",<br>        "to": "NRT"<br>    }<br>    response = requests.post("https://airportgap.dev-tester.com/api/airports/distance", data=payload)<br>    data = response.json().get("data")<br>    assert_that(data["type"]).is_equal_to("airport_distance")<br>    assert_that(data["attributes"]).is_not_empty()<br>    assert_that(data).has_id("LAE-NRT")<br>    assert_that(data["attributes"]["kilometers"]).is_equal_to(4753.834755437252)</pre>
<p>dan favorite_test.py</p>
<pre>from datetime import datetime<br><br>import requests<br>from assertpy import assert_that<br><br>BASE_URL = "https://airportgap.dev-tester.com/api"<br><br><br>def get_token(email, password):<br>    return requests.post(BASE_URL + "/tokens", data={<br>        "email": email,<br>        "password": password<br>    })<br><br><br>def get_my_favorite_airport(token):<br>    header = {<br>        "Authorization": f"Token {token}"<br>    }<br>    return requests.get(BASE_URL + "/favorites", headers=header)<br><br><br>def test_token():<br>    token = get_token(email="naruto@mailinator.com", password="shuriken")<br>    assert_that(token.status_code).is_equal_to(200)<br>    assert_that(token.json()).contains_key("token")<br>    assert_that(token.json().get("token")).is_not_empty()<br><br><br>def test_get_favorite():<br>    give_me_token = get_token(email="naruto@mailinator.com", password="shuriken")<br>    token = give_me_token.json().get("token")<br>    header = {<br>        "Authorization": f"Token {token}"<br>    }<br>    response = requests.get(BASE_URL + "/favorites", headers=header)<br>    data = response.json().get("data")<br>    assert_that(response.status_code).is_equal_to(200)<br>    assert_that(data).is_greater_than_or_equal_to(1)<br><br><br>def test_add_new_favorite():<br>    """<br>    Since the data is hardcoded, then it was not idempotent/repeatable<br>    This test will failed, if NRT already in my favorite list<br>    Need to remove after test teardown<br>    """<br>    give_me_token = get_token(email="naruto@mailinator.com", password="shuriken")<br>    token = give_me_token.json().get("token")<br><br>    before_add = get_my_favorite_airport(token)<br>    data_before = before_add.json().get("data")<br>    assert_that(before_add.text).does_not_contain("NRT")<br><br>    new_airport = {<br>        "airport_id": "NRT",<br>        "note": "I like Narita"<br>    }<br><br>    header = {<br>        "Authorization": f"Token {token}"<br>    }<br><br>    response = requests.post(BASE_URL + "/favorites", headers=header, data=new_airport)<br>    assert_that(response.status_code).is_equal_to(201)<br>    response_data = response.json().get("data")<br>    assert_that(response_data["attributes"]["airport"]["iata"]).is_equal_to(new_airport["airport_id"])<br>    assert_that(response_data["attributes"]["note"]).is_equal_to(new_airport["note"])<br><br>    after_add = get_my_favorite_airport(token)<br>    data_after = after_add.json().get("data")<br>    assert_that(len(data_after)).is_greater_than(len(data_before))<br>    assert_that(after_add.text).contains(new_airport["note"])<br><br><br>def test_update_favorite_note():<br>    give_me_token = get_token(email="naruto@mailinator.com", password="shuriken")<br>    token = give_me_token.json().get("token")<br><br>    before_add = get_my_favorite_airport(token)<br>    data_before = before_add.json().get("data")<br><br>    assert_that(len(data_before)).is_greater_than(0)<br>    id_airport_to_modify = data_before[0]["id"]<br><br>    header = {<br>        "Authorization": f"Token {token}"<br>    }<br><br>    # Add dynamic unique string with a timestamp<br>    new_note = {<br>        "note": f"The note for ID:{id_airport_to_modify} is changed at time: {datetime.now()} "<br>    }<br><br>    response = requests.patch(f"{BASE_URL}/favorites/{id_airport_to_modify}", headers=header, data=new_note)<br>    assert_that(response.status_code).is_equal_to(200)<br>    assert_that(response.text).contains(new_note["note"])<br><br>    after_add = get_my_favorite_airport(token)<br>    data_after = after_add.json().get("data")<br>    for airport_data in data_after:<br>        if airport_data["id"] == id_airport_to_modify:<br>            print(f"Found the modified airport {id_airport_to_modify}")<br>            print("\nHere is the check for specific airport in an array data")<br>            assert_that(airport_data["attributes"]["note"]).is_equal_to(new_note["note"])<br><br><br>def test_delete_favorite():<br>    give_me_token = get_token(email="naruto@mailinator.com", password="shuriken")<br>    token = give_me_token.json().get("token")<br><br>    before_add = get_my_favorite_airport(token)<br>    data_before = before_add.json().get("data")<br><br>    assert_that(len(data_before)).is_greater_than(0)<br>    id_airport_to_delete = data_before[0]["id"]<br><br>    header = {<br>        "Authorization": f"Token {token}"<br>    }<br><br>    response = requests.delete(f"{BASE_URL}/favorites/{id_airport_to_delete}", headers=header)<br>    assert_that(response.status_code).is_equal_to(204)<br>    after_delete = get_my_favorite_airport(token)<br>    data_after = after_delete.json().get("data")<br>    assert_that(len(data_after)).is_less_than(len(data_before))</pre>
<p>Penjelasan kode? hmm sepertinya akan sangat panjang, nanti akan saya jelaskan pada video sepertinya agar lebih runut ehehe, klo nulis keknya panjang ehehe</p>
<h2 id="mcetoc_1et6pnu1t4">Bagaimana cara menjalankan kode dengan pytest?</h2>
<p>Klo mau menjalankan satu satu sih bisa seperti cara sebelumnya `Â pytest test/airport_test.py`</p>
<p>Tapi klo mau menjalankan seluruh test, karena sudah sesuai convention (dalam folder test, file sudah bearakhiran xxx_test.py dan method berawalan test_xxx) sebenarnya cukup menggunakan `pytest` saja tanpa embel embel loh</p>
<hr>
<p>Cukup sekian tutorial kali ini, silakan teman-teman pelajari approach saya dalam menulis kode di atas, apakah sudah test nya seperti itu? atau kamu mungkin punya assertion yang bisa jadi ditambahkan juga, silakan tulis di kolom komentar di bawah ya!</p>
<p>Â Berikutnya kita akan bahas, bagaimana kode ini bisa kita refactor dengan menggunakan class Base API ya</p>
<p>Salam!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Assert dan Pytest - API Test Framework Python (Bagian 2)</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/api-test-automation-framework-python-bagian-2/"/>
        <id>https://fachrul.id/api-test-automation-framework-python-bagian-2/</id>

        <updated>2021-01-29T16:44:33+07:00</updated>
            <summary>
                <![CDATA[
                    Hi Kawan ðŸ‘‹, Di artikel sebelumnya kita telah belajar mengenai instalasi python , library requests dan melakukan HTTP call dengan method GET secara programatis melalui kode python, walaupun belum ada test disana, karena memang artikelnya cukup panjang hehehe, jadi kita lanjut disini saja ya. Oh&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Hi Kawan ðŸ‘‹,</p>
<p>Di artikel sebelumnya kita telah belajar mengenai instalasi python , library requests dan melakukan HTTP call dengan method GET secara programatis melalui kode python, walaupun belum ada test disana, karena memang artikelnya cukup panjang hehehe, jadi kita lanjut disini saja ya.Â </p>
<p>Oh iya artikel ini adalah salah satu dari rangkaian tutorial cara membuat RestfulAPI Test Framework dengan bahasa pemrograman Python, artikel lainnya bisa kamu cekidot disini ya:</p>
<ul>
<li><a href="https://fachrul.id/yuk-belajar-cara-membuat-api-test-automation-framework-python-bagian-1/" target="_blank" rel="noopener noreferrer">PelajaranÂ 1:Â  Setup dan pengenalan HTTP requests</a></li>
<li><a href="https://fachrul.id/api-test-automation-framework-python-bagian-2/" target="_blank" rel="noopener noreferrer">Pelajaran 2: Pengujian dengan assert dan pytest</a></li>
<li><a href="https://fachrul.id/api-test-framework-python-struktur-framework-dan-fluent-assertion-bagian-3/" target="_blank" rel="noopener noreferrer">Pelajaran 3: Struktur awal test framework dan library fluent assertion</a></li>
<li><a href="https://fachrul.id/refactoring-dan-base-api-api-test-framework-python-bagian-4/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 4: Refaktoring dan base helper</a></li>
<li><a href="https://fachrul.id/reporting-api-test-framework-python-bagian-5/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 5: Reporting</a></li>
<li><a href="https://fachrul.id/json-schema-validation-api-test-framework-python-extra-bonus/" target="_blank" rel="noopener noreferrer">Extra: Penambahan schema validation dan running test in parallel</a></li>
</ul>
<hr>
<h2 id="mcetoc_1et6mhigj1">Bagaimana cara menguji API response secara programatis dengan python?</h2>
<p>Pada umumnya di semua bahasa pemrograman memiliki sebuah statement yang digunakan untuk menguji kebenaran sebuah expresion pada program, dan akan mentrigger error pada saat kondisi tersebut bernilai false, pada python kita mengenalnya dengan `assert`, namun sebelum kita menggunakan fungsi `assert`, alangkah baiknya jika kita mengetahui bagaimana cara menguji aplikasi secara sederhana (atau equivalent dari assert):</p>
<pre class="lang-py s-code-block hljs python"><code><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> condition:
    <span class="hljs-keyword">raise</span> AssertionError()</code></pre>
<p>Apabila menggunakan `assert` maka, kode di atas akan menjadi serupa:</p>
<pre class="lang-py s-code-block hljs python"><code><span class="hljs-keyword">assert</span> condition</code></pre>
<p>Jika kamu perhatikan, assert tidak memiliki kurung seperti function pada umumnya, karena ia adalah sebuah statement bukan sebuah function, oia assert juga bisa memiliki pesan opsional, jadi ketika program kita bisa menyisipkan sebuah kalimat tambahan yang akan mempermudah proses debug, contohnya:</p>
<pre class="lang-py s-code-block hljs python"><code><span class="hljs-keyword">assert</span> response_ok, <span class="hljs-string">"Oh no! Server /api/airports is not responding OK!"</span>
</code></pre>
<p>Nah bagaimana implementasinya di kode kita sebelumnya?</p>
<pre>import requests<br><br>response = requests.get('https://airportgap.dev-tester.com/api/airports')<br>assert response.status_code == 200</pre>
<p>Penjelasan kode:</p>
<ul>
<li>baris 1-3 =&gt; kita import library request dan mengakses server dengan method GET lalu disimpan ke dalam variable `response`</li>
<li>baris 4 =&gt; kita melakukan pengujian apakah response.status bernilai 200, jika tidak maka program akan error</li>
</ul>
<p>Oia satu yang perlu disimak, jika assert mengevaluasi nilai False, maka program akan BERHENTI karena error, jadi baris setelah assert failed tidak akan di eksekusi loh! ini bisa memiliki efek samping jika kita perlu melakukan teardown atau proses tertentu setelah test selesai dilakukan (contoh pada pengujian Web, teardown untuk menutup browser setelah sesi test selesai)</p>
<hr>
<h2 id="mcetoc_1et6nb3mn2">Pytest? Benda apakah itu bro?</h2>
<p>Pytest adalah test library pada python, mirip junit atau testNG pada java, selengkapnya sudah saya tulis di artikel terpisah diÂ <a href="https://fachrul.id/belajar-pytest-framework-1/">https://fachrul.id/belajar-pytest-framework-1/</a></p>
<p>Oke penggunaan pytest pada project kita sekarang adalah agar kode test yang kita tulis menjadi rapih dan memiliki report pada command line yang lebih rapih manakala ada kejadian errorÂ </p>
<p>Untuk menggunakan pytest kita perlu install dahulu library nya dengan cara mengetikan command `pip install pytest` pada terminal/cmd kamu</p>
<p>contoh implementasi pytest</p>
<pre>import requests<br><br><br>def test_get_all_airports():<br>    response = requests.get('https://airportgap.dev-tester.com/api/airports')<br>    data = response.json().get('data')<br><br>    assert response.status_code == 200<br>    assert len(data) &gt; 5</pre>
<p>apa yang beda pada kode kita? berikut penjelasannya</p>
<ul>
<li>import requests =&gt; kita meninisiasi import library request sebelum digunakan di baris setelahnya</li>
<li>def test_get_all_airports(): =&gt; kita membuat sebuah function yang diawali dengan def lalu nama function nya, dan penamaan function ini wajib memiliki prefix test_xxxx untuk dikenali sebagai sebuah test case oleh pytest nantinya</li>
<li>response = requests.get(&lt;url&gt;) =&gt; kita melakukan permintaan data pada webserver dan ditampung ke dalam variable response</li>
<li>data = response.json().get('data') =&gt; disini kita akan melakukan chaining proses dari mulai parsing response dalam bentuk json menjadi tipe data dictionary pada python, dan dilanjutkan dengan method .get('data')Â artinya kita akan mengambil value dari atribut "data" pada dictionary tadi</li>
<li>assert response.status_code == 200 =&gt; kita melakukan pengujian dengan mengevaluasi status code http response nya harus sama dengan 200</li>
<li>assert len(data) &gt; 5 =&gt; function len digunakan untuk menghitung berapa jumlah data pada suatu list/collection, nah disini artinya kita melakukan pengujian jumlah data airport harus lebih dari 5</li>
</ul>
<h2 id="mcetoc_1et6o5h7m3">Lalu bagaimana cara menjalankan kodenya?</h2>
<p>oia untuk pytest ada sedikit perbedaan pada cara menjalankan kode/file test, jika sebelumnya kita menjalankanÂ kode pada terminal/cmd dengan `python nama_file.py` sekarang menjadi `pytest nama_file.py`</p>
<p>perhatikan output pada console sekarang menjadi berbeda dengan materi sebelumnya di pelajaran 1 kan ya!</p>
<p>oia untuk lebih informatif bisa tambahkan -v (verbose) pada argument pytest menjadi seperti ini `pytest -v nama_file.py`</p>
<p>Jika kode tidak berjalan dengan pytestÂ yang perlu diperhatikan adalah penamaan method (def) harus diawali dengan test_xxx yaa!</p>
<p>Â </p>
<p>Salam!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Yuk Belajar Cara Membuat API Test Automation Framework Python (Bagian 1)</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/yuk-belajar-cara-membuat-api-test-automation-framework-python-bagian-1/"/>
        <id>https://fachrul.id/yuk-belajar-cara-membuat-api-test-automation-framework-python-bagian-1/</id>

        <updated>2021-01-29T17:23:04+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/41/pexels-zachary-debottis-1888883.jpg" alt="" />
                    Hi Kawan ðŸ‘‹, Di kesempatan kali ini saya akan membuat rangkaian post yang berisi tutorial cara membuat API Test Framework dengan Python dari dasar sampai jadi sebuah framework testing yang siap di integrasikan dengan pipeline CI/CD ðŸ˜ŽðŸ¤˜ Oke setiap post akan berisi sebuah topik tahapan&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/41/pexels-zachary-debottis-1888883.jpg" alt="" />
                <p>Hi Kawan ðŸ‘‹,</p>
<p>Di kesempatan kali ini saya akan membuat rangkaian post yang berisi tutorial cara membuat API Test Framework dengan Python dari dasar sampai jadi sebuah framework testing yang siap di integrasikan dengan pipeline CI/CD ðŸ˜ŽðŸ¤˜</p>
<p>Oke setiap post akan berisi sebuah topik tahapan pelajaran dari dasar disetiap aspeknya, semoga saja ini bisa bermanfaat bagi teman-teman yangÂ mulai belajar menekuni dunia software quality assurance / Test engineering ya,Â harapan saya, tutorial ini bisa membantuÂ teman-teman untuk memahami approachÂ API testing, dan bisa mempermudah implementasi API testÂ framework dengan python di tempat kerja kalianÂ </p>
<p>Kurang lebih rangkaian posting akan seperti:</p>
<ul>
<li><a href="https://fachrul.id/yuk-belajar-cara-membuat-api-test-automation-framework-python-bagian-1/" target="_blank" rel="noopener noreferrer">PelajaranÂ 1:Â  Setup dan pengenalan HTTP requests</a></li>
<li><a href="https://fachrul.id/api-test-automation-framework-python-bagian-2/" target="_blank" rel="noopener noreferrer">Pelajaran 2: Pengujian dengan assert dan pytest</a></li>
<li><a href="https://fachrul.id/api-test-framework-python-struktur-framework-dan-fluent-assertion-bagian-3/" target="_blank" rel="noopener noreferrer">Pelajaran 3: Struktur awal test framework dan library fluent assertion</a></li>
<li><a href="https://fachrul.id/refactoring-dan-base-api-api-test-framework-python-bagian-4/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 4: Refaktoring dan base helper</a></li>
<li><a href="https://fachrul.id/reporting-api-test-framework-python-bagian-5/" target="_blank" rel="noopener noreferrer" style="font-family: -apple-system, BlinkMacSystemFont, Arial, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: inherit;">Pelajaran 5: Reporting</a></li>
<li><a href="https://fachrul.id/json-schema-validation-api-test-framework-python-extra-bonus/" target="_blank" rel="noopener noreferrer">Extra: Penambahan schema validation dan running test in parallel</a></li>
</ul>
<p>Kamu bisa berkomentar atau bertanya di pada bagian komentar post tersebut, insya alloh nanti akan saya jawab sebisanya ehehe, atau bisa juga DM dan follow @fachrulch untuk kritik dan saran nya dalam pembahasan ini</p>
<p>Â </p>
<hr>
<h2 id="mcetoc_1et6qe1m90">Â </h2>
<h2 id="mcetoc_1et6f3hnh0">Apa itu API sih?</h2>
<p id="mcetoc_1et6f6a0c2">Sebenernya saya ga yakin bisa menjelaskannya dengan benar, mungkin bisa kamu googling aja nanti ya klo masih belum jelas dari penjelasan saya ehehe, jadi kurang lebih gini:</p>
<p><img class="post__image--left" src="https://fachrul.id/media/posts/41/api-1.png" alt="" width="800" height="454">API (Application Programming Interface) atau juga seringkali dikenal dengan webservice adalah bentuk komunikasi antar sistem, sederhananya, API menyediakan serangkaian cara/kontrak bagaimana sebuah informasi bisa ditransfer/diakses.</p>
<p>API ada dua kategori, yaitu SOAP dan REST, SOAPmenggunakan format XML yang membungkus informasi data nya, sejauh yg saya tau soap masih umum dipergunakan oleh perbankan sampai saat ini, sedangkan REST sudah umum dipakai oleh khalayak ramai, karena lebih ringan dalam hal ukuran data yang disimpan dalam format JSON, dan umumnya permintaan dan penerimaan data menggunakan protokol HTTP, biasanya menggunakan verbs GET, POST, PUT dan DELETE dalam berinteraksi.</p>
<p>Di kesempatan ini kita akan fokus dalam pembuatan API test framework untuk RESTful API ya, tools yang sering dipergunakan dalam berinteraksi dengan API adalah Postman</p>
<figure class="post__image post__image--full" ><img src="https://fachrul.id/media/posts/41/rest-api-contoh-sederhana.png" alt="" width="1280" height="757">
<figcaption >RestAPI secara sederhana</figcaption>
</figure>
<p>Â </p>
<h2 id="mcetoc_1et6fs4l03">Kenapa Perlu Membuat API test automation?</h2>
<p>Test functional dari API sebenarnya lewat postman juga bisa, entah manually atau automation test disana, memiliki functional API automation adalah langkah besar dalam pengujian yang cepat terhadap sistem, apalagi API cenderung lebih stabil daripada UI automation test. Dampak yang bisa kita harapkan dari memiliki automation test pada API/webservice adalah kita bisa menguji user flow, business logic dengan cepat dan stabil.</p>
<p>Nah kita akan membuat API test automation dengan python, walaupun sebenarnya bisa juga dibuat dengan bahasa pemrograman lain seperti java, kotlin, javascript, dll. tetapi menurut saya python lebih sederhana dan mudah dipelajari oleh pemula, juga sangat powerful bagi tingkat mahir sekalipun, so i think it is good investment</p>
<h2 id="mcetoc_1et6g6lkh4">OK, terus apa yang diperlukan dalam pengembangan API test framework dengan Python?</h2>
<p>Udah siap? oke kita list dulu ya apa saja yang diperlukan dalam pengembangan API test framework dengan bahas python</p>
<ol>
<li>Komputer kamu sudah terinstal python (saran saya sudah versi 3.8 keatas ya)</li>
<li>Install code editor, saran saya sih menggunakan PyCharm, tapi klo mau yg lebih ringan boleh pake Visual Code ataupun Notepad++ juga bisa harusnya</li>
</ol>
<hr>
<h2 id="mcetoc_1et6gh63a6">Studi Kasus</h2>
<p>Oke, sepertinya kita akan bahas dulu aplikasi apa yang akan menjadi target kita dalam pengembangan API test framework, sebagai contoh kita akan mengautomasi pengujian padaÂ <a href="https://airportgap.dev-tester.com">https://airportgap.dev-tester.com</a>Â sebuah dummy app yang dikhususkan bagi teman-teman yang berlatih dalam mengasah automation skill pada API</p>
<p>Kenapa saya pilih ini? karena koleksi API disini kurang lebih akan mirip dengan apa yang kamu punya di kantor, ada API yang bisa diakses dengan GET, POST, DELETE dan PUT/PATCH, jadi bisa dikatakan mini project API, apalagi dokumentasinya API juga sudah cukup jelas ya, bisa diakses disiniÂ <a href="https://airportgap.dev-tester.com/docs">https://airportgap.dev-tester.com/docs</a></p>
<p><img class="post__image--left" src="https://fachrul.id/media/posts/41/374px-Requests_Python_Logo.png" alt="" width="374" height="480"></p>
<h2 id="mcetoc_1et6gchqd5">Pelajaran 1 - pengenalan HTTP requests</h2>
<p>SiapÂ kita mulai ya, untuk mengakses API/webservice kita perlu sebuah library yang akan memudahkan kita dalam berinteraksi dengan API, yaitu menggunakan library requests, cara menginstall library ini adalah dengan command</p>
<pre>pip install requests</pre>
<p>Dokumentasi requests menurut saya sangat jelas dan keren, coba saja lihat <a href="https://requests.readthedocs.io/en/master/">https://requests.readthedocs.io/en/master/</a> , kita bisa pelajari lebih lanjut fitur dan kemampuan requests disana ya, tapi secara natural sangat mudah diingat kok method dan fungsi nya</p>
<p>Lanjut,, kita akan mengakses informasi daftar airports yand bisa diakses dengan melakukan request GET pada endpoint `/api/airports` dan melihat apa saja informasi yang terkandung di dalamnya</p>
<p>Untuk itu kita harus membuat file python baru di folder/direktori yang sudah kamu pilih ya</p>
<p>Di baris awal kita perlu melakukan import library request dahulu dengan menambahkan kode `import requests` lalu di baris berikutnya kita akan menggunakan library requests dalam mengakses API dengan kodeÂ </p>
<pre>import requests<br><br>response = requests.get('https://airportgap.dev-tester.com/api/airports')<br>print(response.status_code)<br>print(response.text)Â </pre>
<p>Â Penjelasan kode:</p>
<ul>
<li>import requests =&gt; melakukan import library `requests` sebelum penggunaan di baris selanjutnya</li>
<li>response = requests.get(&lt;url&gt;) =&gt; kita melakukan permintaan GET pada sebuah url yang kemudian di tampung kedalam variable `response`</li>
<li>print(response.status_code) dan print(response.text) =&gt; kita mengeluarkan text response dan status code kepada python console dengan command print</li>
</ul>
<p>Bagaimana cara run file ini? yaitu dengan membuka terminal/cmd lalu masuk ke directory/folder dimana file python ini berada, kemudian kita tinggal menjalankan command `python namafile.py` maka kita bisa melihat hasil requests di dalam console terminal/cmd</p>
<hr>
<h2 id="mcetoc_1et6i3cek7">Penutup</h2>
<p>Namun,,, ini masih belum ada test nya ya, di pelajaran kali ini kita hanya bisa melihat hasil GET pada console, tanpa ada pengujian secara otomatis (pengujian masih visual oleh kita melalui console ehehe)</p>
<p>Karena materi disini sudah cukup panjang ehehe, PR dari saya di tahap 1 ini adalah untuk mempelajari <a href="https://requests.readthedocs.io/en/master/" target="_blank" rel="noopener noreferrer">dokumentasi requests</a> ya, kita lihat betapa mudahnya mengkases webservice dengan library ini, baik itu dengan method GET, POST, PUT, PATCH ya</p>
<p>Dimateri berikutnya kita akan menggunakan test dengan assertion jadi sudah mulai masuk ke automation test</p>
<p>Salam!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Pytest: Memahami Cara Kerja Testing Framework (bagian 1)</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/belajar-pytest-framework-1/"/>
        <id>https://fachrul.id/belajar-pytest-framework-1/</id>

        <updated>2020-05-20T00:06:39+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-20-at-00.05.17.png" alt="" />
                    Apa itu pytest?icon PytestAdalah kerangka kerja dari pengujian pada kode python, bisa dibilang semua test framework (junit, testng, rspec, dkk) adalah jantung nya dari segala test automation framework, pytest bisa digunakan pada berbagai tipe dan level dari software testing, sebenarnya ada berbagai alternatif testing tools&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-20-at-00.05.17.png" alt="" />
                <h2 id="mcetoc_1e8ifufs10">Apa itu pytest?</h2>
<figure class="post__image post__image--left" ><img src="https://fachrul.id/media/posts/34/pytest1.png" alt="" width="150" height="143">
<figcaption >icon Pytest</figcaption>
</figure>
<p>Adalah kerangka kerja dari pengujian pada kode python, bisa dibilang semua test framework (<em><strong>junit, testng, rspec</strong></em>, dkk) adalah jantung nya dari segala test automation framework, pytest bisa digunakan pada berbagai tipe dan level dari software testing, sebenarnya ada berbagai alternatif testing tools pada python yang lainya seperti uniitest ataupun nose, tapi banyak open source project yang mulai "hijrah"Â mengadopsi pytest karena fitur yang ada pada <a href="https://docs.pytest.org/en/latest/">pytest</a>Â yang menarik diantara yang lainya yaitu:</p>
<ul>
<li>Mudah membuat kode test dari pengujian sederhana hingga pengujian kompeks tetap mudah menuliskan kodeÂ pengujiannya dengan pytest</li>
<li>Mudah dibaca</li>
<li>Mudah dipelajari</li>
<li>Kode yang Pythonic banget</li>
<li>Bahkan pytest bisa menjalankan kode pengujian yang ditulis dengan format unittest ataupun nose</li>
<li>Komunitas yang sangat aktif dan pengembangan yang terjaga</li>
</ul>
<p>Â </p>
<hr>
<p>Post ini merupakan rangkaian post mengenai membuat automationt test dengan python</p>
<h4 id="mcetoc_1e8mtsf4p6">Daftar isinya:</h4>
<ol>
<li><a href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/" target="_blank" rel="noopener noreferrer">Belajar Python dari dasar</a></li>
<li><a href="https://fachrul.id/belajar-pytest-framework-1/" target="_blank" rel="noopener noreferrer">Memahami cara kerja Pytest (bagian 1)</a> &lt;== Sekarang disini</li>
<li><a href="https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/" target="_blank" rel="noopener noreferrer">Mulai membuat automation test dengan Selenium</a></li>
<li><a href="https://fachrul.id/selector-locator-strategy-yang-baik/" target="_blank" rel="noopener noreferrer">Menemukan Element dengan locator strategi yang baik</a></li>
</ol>
<hr>
<p>Â </p>
<p>Berikutnya akan kitaÂ belajar tentang penggunaan pytest dalam mengembangkan kerangka kerja (framework) pengujian otomatis (automated test) dalam bahasa pemrograman python, dengan menguasai kerangka kerja pengujian di python maka kamu akan dengan mudahÂ mengkombinasikan automated test pada REST API, browser dengan selenium nya ataupun mobile apps dengan appium karena sesungguhnya mereka itu adalah library yang menjadi pelengkap pytest ini ðŸ˜…Â </p>
<h2 id="mcetoc_1e8igll785">Persiapan Pytest</h2>
<p>Saya asumsikan python sudah terinstal di komputer kamu, dan tak diperlukan untuk tahu banyak tentang python itu sendiri, karena contoh yang akan saya tunjukan cuma kode sederhana bahkan bisa dibilang terlalu sederhana :D</p>
<p>Cara installnya cukup menjalankan command berikut pada terminal ataupun command line kamu</p>
<p><code>pip install pytest</code></p>
<p>lalu setelah installasi berhasil coba jalankan perintah:</p>
<p><code>pytest --help</code></p>
<p>jika installasi benar maka akan memunculkan informasi lengkap tentang cara penggunaan pytest pada command line</p>
<p>dokumentasi lebih lanjut bisa dilihat diÂ <a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>Â </p>
<h2 id="mcetoc_1e8ifuj801">Menjalankan Pytest</h2>
<p id="mcetoc_1e8mm5g730">Secara aturan (convention) di berbagai macam project pengujian, kode test harus ditaruh didalam directory (folder) /tests/, dan secara otomatis pytest akan menemukan dan mengeksekusi test yang ditemukan dalam proses test discovery seperti berikut:</p>
<ul>
<li>Nama file mengandung nama "<em><strong>test_&lt;sesuatu&gt;.py</strong></em>" ataupun "<em><strong>&lt;sesuatu&gt;_test.py</strong></em>"</li>
<li>Test class yang dinamai "<strong><em>Test&lt;Sesuatu&gt;</em></strong>"</li>
<li>Test method/function yang diawali "<strong><em>test_&lt;sesuatu&gt;</em></strong>", dan menariknya, pytest tidak memerlukan sebuah file <strong><em>__init__.py</em></strong> disemua test directory seperti pada aplikasi python pada umumnya</li>
</ul>
<p>cara menjalankan kode test:</p>
<table>
<tbody>
<tr>
<td><code>$ â€‹â€‹pytestâ€‹â€‹ tests/</code></td>
<td>menjalankan seluruh test pada directory /tests/</td>
</tr>
<tr>
<td><code>$ â€‹â€‹pytestâ€‹â€‹ tests/nama_file.py</code></td>
<td>menjalankan test hanya pada module "nama_file.py"</td>
</tr>
<tr>
<td><code>$ â€‹â€‹pytestâ€‹â€‹ tests/nama_file.py::TestClass</code></td>
<td>menjalankan test hanya pada class TestClass di module "nama_file.py"</td>
</tr>
<tr>
<td>
<p><code>$ â€‹â€‹pytestâ€‹â€‹ tests/nama_file::TestClass::test_method</code></p>
<p>atau jika bentuk test bukan dalam Class</p>
<p><code>$ â€‹â€‹pytestâ€‹â€‹ tests/nama_file::test_method</code></p>
</td>
<td>menjalankan test hanya di method tertentu saja, tidak menjalankan method lainnya</td>
</tr>
</tbody>
</table>
<p>Â </p>
<h2 id="mcetoc_1e8mst3vq1">Marker</h2>
<p>Penggunaan decorator <em><strong>@pytest.mark.&lt;sesuatu&gt;</strong></em> sangat memudahkan kita dalam mengelompokan test, ibarat tagging dari test, satu test bisa memiliki lebih dari satu mark, dan kitapun bisa mengeksekusi test berdasarkan mark tertentu, seperti berikut</p>
<p><code>$ â€‹â€‹pytestâ€‹â€‹ -m smoke</code></p>
<p>maka pytest akan mencari test mana saja yang memiliki tag @pytest.mark.smoke untuk dijalankan</p>
<p>Informasi lebih lanjut, kamu bisa akses dokumentasinya langsung di terminal dengan perintah</p>
<p><code>$ â€‹â€‹pytestâ€‹â€‹ --help</code></p>
<h2 id="mcetoc_1e8ifum052">Menulis Test</h2>
<p>Kurang lebih contoh kerangka kerja test pada pytest sebagai berikut:</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-19-at-22.56.59.png" alt="" width="450" height="450">
<figcaption >struktur kode pytest pada umumnya</figcaption>
</figure>
<p>Â </p>
<p>File test berada dibawah directory tests, dan pytest.ini adalah file optional, biasanya terkait dengan configurasi default cara menjalankan pytest, lalu pytest.py ini juga optional, bisa dianggap file ini berisikan dari "local plugin" karena semua kode yang ada disini bisa diakses oleh seluruh file test yang dijalankan, sehingga sangat cocok untuk menaruh kode yang bisa di reuse antar test</p>
<p>Pada kesempatan kali ini sebagai contoh sederhana dalam mencoba pytest, buatlah sebuah file /tests/test_math.py yang di dalamnya isinya sebagai berikut:</p>
<pre><code class="language-python">def test_pertambahan():
    assert 1 + 11 == 12
    
    
class TestHimpunan:
    def test_persamaan(self):
        assert (1,2,3) == (1,2,3)
</code></pre>
<p id="mcetoc_1e8mn0coi1">lalu cara menjalankan nya pada terminal dengan perintah sebagai berikut:</p>
<p><code>pytest tests/test_math.py</code></p>
<p>Output yang dihasilkan kurang lebih seperti berikut:</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-19-at-22.21.54.png" alt="" width="1024" height="538">
<figcaption >output test berhasil</figcaption>
</figure>
<p>Ok kita bahas ya, pada contoh diatas saya menjalankan 2 test pada file <em><strong>test_math.py</strong></em> yaitu <em><strong>def test_pertambahan</strong></em> dan <strong><em>def test_persamaan</em></strong>, disini saya menunjukan bahwa pytest support bentuk kode pengujian yang dituliskan sebagai function mandiri atau method pada class, tidak ada perbedaan signifikan, hanya pengelompokan test saja menurut saya.</p>
<p>Dan jika ditilik lagi, jika test berjalan baik dan passed akan ditandai dengan simbol titik warna hijau (di windows gada warnanya) pada output console danÂ jika failed ditandai dengan huruf F warna merah, disertai dengan informasi pelengkapnya.</p>
<p>agar lebih jelas lagi mari kita coba membuat test gagal dengan mengubah nilai pada assertnya, dan agar tampilan output console lebih informatif, jalankan perintahÂ <code>pytest -v tests/test_math.py</code> lalu perhatikan error message yang ditampilkan sebagai berikut</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-19-at-22.26.15.png" alt="" width="1024" height="1352">
<figcaption >hasil menjalankan kode test yang ternyata failed :P</figcaption>
</figure>
<p>Ada berbagai macam jenis outcome dari sebuah test yang akan dihasilkan oleh pytest sebagai berikut:</p>
<ul>
<li><strong>PASSED</strong> (.) adalah test yang berjalan sebagaimana mestinya</li>
<li><strong>FAILED</strong> (F) adalah test yang tidak berjalan seperti yang diharapkan</li>
<li><strong>SKIPPED</strong> (s) adalah test yang tidak dijalankan (dilompati), kita bisa mengkonfigurasi test yang harus di lompati dengan menggunakan decorator <em><strong>@pytest.mark.skip()</strong> </em>atau secara programatically</li>
<li><strong>xfail</strong> (x): adalah test yang tidak seharusnya untuk pass, jadi secara eksplisit kita mengharapkan suatu test untuk failed, ditandai dengan decorator <em><strong>@pytest.mark.xfail()</strong></em></li>
<li><strong>XPASS</strong> (X): kurang lebih mirip xfail</li>
<li><strong>ERROR</strong> (E) adalah exception yang terjadi diluar test function tersebut, bisa gara-gara fixture, di hook atau dari mis-configurasi</li>
</ul>
<h2 id="mcetoc_1e8ifuoob3">Ekspektasi</h2>
<p>Pytest akan menggak exception yang tidak dihandle sebagai sebuah failure, pada saat statement assert dihadapkan kepada nilai False maka ia akan melempar exception dan langsung memberhentikan eksekusi program, jadi tidak akan dilanjutkan ke statement setelah assert yang failed tersebut</p>
<pre><code class="language-python">class TestHimpunan:
    def test_persamaan(self):
        assert (1,3,5) == (1,4,5)
        print('Bagian ini tidak akan dijalankan')</code></pre>
<p id="mcetoc_1e8mp1cg62">Tapi jika memang justru exception yang diharpkan maka bisa menggunakanÂ <span class="pln">pytest</span><span class="pun">.</span><span class="pln">raises</span></p>
<p>Â </p>
<h2 id="mcetoc_1e8mr42ou1">Contoh studi kasus JSON api kode post Indonesia</h2>
<p>Contoh API test sederhana menggunakan pytest untuk menguji json api dari repo iniÂ <a href="https://github.com/bachors/Kode-Pos-API">https://github.com/bachors/Kode-Pos-API</a>Â yang memiliki aplikasi live di firebaseio</p>
<p>Kita buat file di tests/feature_kodepost/test_kodepos_indonesia.py, isinya</p>
<pre><code class="language-python">iimport requests 

def test_provinsi():
    list_provinsi = requests.get('https://kodepos-2d475.firebaseio.com/list_propinsi.json?print=pretty')
    data_prov = list_provinsi.json()
    assert len(data_prov) == 34
    assert data_prov.get('p9') == 'Jawa Barat'
    
def test_kotakab_jabar():
    list_kotakab = requests.get('https://kodepos-2d475.firebaseio.com/list_kotakab/p9.json?print=pretty')
    data_kotakab = list_kotakab.json()
    assert list_kotakab.status_code == 200
    assert data_kotakab.get('k60') == 'Tasikmalaya_typo'
    assert len(data_kotakab) == 21
    
def test_kodepos_tasik():
    list_keckel = requests.get('https://kodepos-2d475.firebaseio.com/kota_kab/k60.json?print=pretty')
    data_kodepos = list_keckel.json()
    assert list_keckel.status_code == 200
    assert len(data_kodepos) == 420
 </code></pre>
<p>lalu cara menjalankannya denganÂ  command</p>
<p><code>âžœ pytest -v tests/feature_kodepos</code></p>
<p>maka akan muncul output sebagai berikut</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-19-at-23.21.32.png" alt="" width="1024" height="1020">
<figcaption >output menjalankan test kdoepos</figcaption>
</figure>
<p>Test nya sengaja saya buat failed, karena untuk melihat betapa cantiknya error log dari pytest jika terjadi masalah, apa yang menarik disini:</p>
<ul>
<li>Informasi kesalahan yang jelas, contoh diatas ada typo pada string yang dibandingkan (assert) maka ditunjukan kelebihan character dengan tanda plus</li>
<li>test dijalankan sesuai dengan urutan penulisan test pada file, jadi dieksekusi dari atas kebawah</li>
<li>walaupun test ke-2 failed, tetap melanjutkan ekseskusi test ke-3, (stop ekseskusi karena throw exception hanya pada scope test function, jadi dari failed tersebut tidak akan melanjutkan ekseskusi baris statement berikutnya tapi langsung pindah ke test berikutnya)</li>
</ul>
<p>Yuk kita bermain dengan kode test diatas, berikutnya kita ubah kode test sebagai berikut</p>
<p>Kita tambahkan decorator xfail di method yg gagal menjadi seperti ini</p>
<div>
<pre><code class="language-python">@pytest.mark.xfail
def test_kotakab_jabar():<br>   ...</code></pre>
<p>Lalu jalankan kembali testnya dan outputnya sekarang berbeda</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/34/Screen-Shot-2020-05-19-at-23.34.05.png" alt="" width="1024" height="580">
<figcaption >semua hasil passed dengan catatan 1 xfail</figcaption>
</figure>
<p>Nah terlihat bahwa sekarang semua test hijau (passed) dengan catatan ada 1 test yang memang expected failed (xfailed)</p>
<h2 id="mcetoc_1e8msnr5s0">Pytest Fixtures</h2>
<p>Nah bagian ini sebenarnya yang menurut saya paling keren dari pytest, tapi berhubung postingan kali ini sudah cukup panjang, maka informasi lebih lanjut terkait fixture akan disambung di post selanjutnya ya, dengan contoh framework pada web ui testing</p>
<p>Bersambung ...</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Selector (Locator) Strategy adalah koentji dari Test Automation</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/selector-locator-strategy-yang-baik/"/>
        <id>https://fachrul.id/selector-locator-strategy-yang-baik/</id>

        <updated>2020-05-19T23:58:24+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/33/gugel-selector.png" alt="selector strategy yang baik" />
                    Hi kawan, Jika kamu berkecimpung di pemrograman automation test menggunakan selenium / appium tentunya kamu sudah paham banget kalau sampe salah selector (locator) makaÂ kamu telah membuang banyakÂ waktu karena selector yang kamu telah tuliskan tidak ditemukan dan harus re-run lagi ðŸ˜­ Menemukan element pada tampilan aplikasi&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/33/gugel-selector.png" alt="selector strategy yang baik" />
                <p>Hi kawan,</p>
<p>Jika kamu berkecimpung di pemrograman automation test menggunakan selenium / appium tentunya kamu sudah paham banget kalau sampe salah selector (locator) makaÂ kamu telah membuang banyakÂ waktu karena selector yang kamu telah tuliskan tidak ditemukan dan harus re-run lagi ðŸ˜­</p>
<p>Menemukan element pada tampilan aplikasi seperti buttons, inputs, divs, checkboxes ataupun anchor tag terkadang cukup "menantang", terutama ketika tidak adanya ke-unikan ataupun identitas yang jelas pada element tersebut, bahakan pernah saya menguji aplikasi yang ID nya selalu berubah karena digenerate otomatis oleh library front end nya. Alamakjang ðŸ˜µ</p>
<hr>
<p>Post ini merupakan rangkaian post mengenai membuat automationt test dengan python</p>
<h4 id="mcetoc_1e8mtsf4p6">Daftar isinya:</h4>
<ol>
<li><a href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/" target="_blank" rel="noopener noreferrer">Belajar Python dari dasar</a></li>
<li><a href="https://fachrul.id/belajar-pytest-framework-1/" target="_blank" rel="noopener noreferrer">Memahami cara kerja Pytest (bagian 1)</a>Â </li>
<li><a href="https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/" target="_blank" rel="noopener noreferrer">Mulai membuat automation test dengan Selenium</a></li>
<li><a href="https://fachrul.id/selector-locator-strategy-yang-baik/" target="_blank" rel="noopener noreferrer">Menemukan Element dengan locator strategi yang baik</a>Â &lt;== Sekarang disini</li>
</ol>
<hr>
<p>Â </p>
<h2 id="mcetoc_1e88anigp0">Apa sih web/mobile elements itu?</h2>
<p>Terjemahan ala saya sih ia adalah sebuah element adalah entitas pada aplikasi yang di render menjadi halaman web ataupun user interface pada mobile app. Jadi apapun yang dilihat oleh pengguna (termasuk yang ga keliatan sih) adalah element, seperti buttons submit, foto profile, navigasi halaman.</p>
<p>Biasanya bentuknya berupa HTML pada web ataupun XML pada mobile apps, jadi bisa dikatakan memiliki struktur seperti tag name, attributes dan contents, termasuk kedalam hierarki posisinya.</p>
<p>Untuk pembahasan ini saya cenderung membahas element pada web, untuk mobile apps akan dibahas lebih rinci di lain kesempatan karena perbedaan struktur source code tampilan lintas platformnya, tapi masih sangat relevan dengan mobile apps terutama mobile browser ya gaes.</p>
<h2 id="mcetoc_1e88anmi41">Nah itu kan baru element, trus selector itu apa?</h2>
<p>Jadi selector ataupun locator adalah sebuah bentuk query untuk mengakses element tertentu yang ada di halaman aplikasi, nah untuk website biasanya object hasil query locator ini disebut node yang terletak di Document Object Model (DOM)</p>
<p>Perlunya selector element pada aplikasi adalah sebagai awal mula interaksi automation. Setelah selenium/appium menemukan element sesuaiÂ selector maka kamu bisa mengakses method di element itu seperti meng-click button, menginput text, ataupun mengambil text pada element tersebut.</p>
<h2 id="mcetoc_1e88anq9m2">Kenapa kok perlu banget selector?</h2>
<p>Jadi gini, sebagai manusia yang menggunakan aplikasi tentu kita tidak perlu selector untuk berinteraksi dengan aplikasi, kita bisa menggunakan indera penglihatan untuk menjalankan aksi seperti submit form, scrollingÂ halaman, click sana sini di halaman web, tapi tidak begitu bagi test automation yang harus menerjemahkan interaksi manusia tadi ke istilah yang komputer bisa mengerti secara programatis. JadiÂ selenium/appium ga akan melihat aplikasi sebagaimana kita kita melihat tampilannya, tapiÂ ia akan melihatnya secara source code struktural seperti html/xml (catatan: tapi jaman now, sedang gandrung library/tools yang mendukung visual testing juga loh seperti <a href="https://applitools.com" target="_blank" rel="noopener noreferrer">applitools</a>, <a href="https://www.mabl.com" target="_blank" rel="noopener noreferrer">mabl</a>, <a href="http://test.ai/" target="_blank" rel="noopener noreferrer">test.ai</a> dkk)</p>
<h2 id="mcetoc_1e88anu3m3">Hmm gitu ya.. Bentuk element itu seperti apa sih?</h2>
<p>Sebagai contoh kita akan bedah element di google.co.id ya, coba pada browser chrome kamu (sama juga pada firefox ataupun safari) klik kanan pada kotak pencarian trus pilih opsi menu "Inspect" maka akan muncul jendela Developer tool, pada Tab aktif "Elements", seperti ini gambarannya: (kamu coba juga donk ah)</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/33/gugel.png" alt="" width="1764" height="901">
<figcaption >tampilan inspect element pada google chrome</figcaption>
</figure>
<p>Pada gambar diatas saya memberikan keterangan nomer,Â  yang akan saya jelaskan sebagai berikut:</p>
<ol>
<li>Pada gambar no.1 diatas, kotak pencarian adalah target element yang kita lihat, nampak ada highlight warna biru di element tersebut</li>
<li>Ini adalah kode sumber HTML dari halaman google.co.id yang aktif pada bagian kotak pencarian yaitu tag &lt;input/&gt; beserta atribut yang melekat pada nya</li>
<li>Apa yang disarankan oleh browser chrome jika kamu mencari element kotak pencarian ini, ada tag dengan classnya, accessibility yang ada pada element tersebut</li>
</ol>
<p>Nah jika kita terjemahkan pada kode automation dengan python (yang kurang lebih akan sama juga dengan selenium bindder di bahasa pemrograman lainya) nampak seperti berikut:</p>
<div>
<pre><code class="language-python line-numbers">search_box = driver.find_element_by_name('q')
# driver.find_element(By.NAME, 'q')  &lt;= atau alternatif bisa juga seperti ini
search_box.send_keys('Belajar automation testing' + Keys.ENTER)</code></pre>
</div>
<p>di baris pertama saya akan membuat variable search_box yang isinya adalah element yang mengandung nama "q" seperti pada keterangan element search box yang saya tunjukan sebelumnya si kotak pencarian ini memiliki element &lt;input ...Â <span class="webkit-html-attribute-name">name</span>="<span class="webkit-html-attribute-value">q</span>" ... /&gt; nah disini selector yang kita ambil adalah attribut name sama dengan "q", di baris kedua adalah alternatif cara penulisan kode saja</p>
<p>di baris berikutnya, adalah proses automation test code saya untuk berinteraksi dengan element tersebut yaitu mengirimkan perintah send keys alias ketikan kataÂ Belajar automation testing pada kotak pencarian dilanjutkan dengan menekan tombol Enter</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/33/hasil-pencarian-google-belajar-automation.png" alt="" width="1749" height="890">
<figcaption >hasil pencarian kata kunci 'belajar automation' pada google search</figcaption>
</figure>
<p>Selector pun adakalanya bersifat tidak unik, seperti pada halaman pencarian google diatas, search result pada umumnya berupa list yang identik secara rupa dan bentuk, karena memiliki stylesheet (CSS) yang sama, hanya isi yang beda, lantas bagaimana cara kita memilih element yang kita mau agar lebih akurat akan kita diskusikan nanti ya.</p>
<p>Bisa jadi kebutuhan test kita pun perlu mendapatkan element yang lebih dari satu juga, katakan lah contoh diatas mau kita jadikan test code seperti ini jadinya (masih di bahasa python):</p>
<div>
<pre><code class="language-python line-numbers">results_title = driver.find_elements_by_css_selector('h3')
assert len(results_title) &gt; 0
</code></pre>
<p>Â Dimana kebutuhannya memang menghitungÂ jumlah dariÂ hasil pencarian yang didapatkan dengan asusi kata kunci tersebut akan menemukan data pada halaman hasil pencarian, makanya kita memerlukan selector pada element judul pencarian yaitu &lt;h3&gt;</p>
<p>Pada test framework yang besar umumnya mengadopsi design pattern "<a href="https://www.guru99.com/page-object-model-pom-page-factory-in-selenium-ultimate-guide.html" target="_blank" rel="noopener noreferrer">Page Object Model</a>" untuk mengelola selector / locator dan interaksi di halaman tertentu, ada juga sih yang mengadopsi <a href="https://www.infoq.com/articles/Beyond-Page-Objects-Test-Automation-Serenity-Screenplay" target="_blank" rel="noopener noreferrer">Screenplay Pattern</a> dimana sedikit ada perbedaan lokasi dimana selector disimpan pada kode automation testnya</p>
<h2 id="mcetoc_1e88aomug4">Hmm.. trus gimana cara saya menemukan selector?</h2>
<p>Sebenernya,Â cara untuk menentukan selector itu ada banyak, bisa dari element tag, id, class, attributes, isi text, bahkan relatif terhadap element parent/child/sibling juga bisa, bahkan yang saya sebutkan tadi bisa dikombinasikan juga loh. Wadidaw, banyak banget sih selector strategi yang bisa diterapkan. Dalam waktu dekat saya pun akan membuat video tutorial terkait berbagai penggunaan selector strategi, karena medium video lebih enak untuk langsung terjun praktek penggunaan, jadi jangan lupa <a href="https://www.youtube.com/channel/UCZVY3VNPkFs_iINTXEBWWgw" target="_blank" rel="noopener noreferrer">subscibe disini</a> ya gaes ahaha</p>
<p>Kita harus hati-hati juga, penulisan selector yang salah mengharuskan kita re-run automation test dan ini mubazir waktu loh. Kalau selectornya terlalu luas bisa salah dalam menentukan element yang harusnya kita dapat, kalau terlalu spesifik malah rawan breaking ketika ada yang berubah di struktur DOM nya, kalau terlalu panjang jadi sulit untuk di baca oleh yang lain. Jadi gimana donk?</p>
<p>Prinsip yang bisa dipegang dalam membuat selector / locator strategy yang saya pegang adalahÂ <strong>Buatlah selector yang paling sederhana dalam menemukan keunikan element yang menjadi target kita</strong></p>
<p>Â Nah biasanya urutannya seperti ini:</p>
<ol>
<li>Element nya punya ID (yang unik) kah? =&gt; pake ID aja</li>
<li>CSS class nya spesifik dan cuma ada di element itu (untuk format) =&gt; pake CSS klo selector kalo gitu</li>
<li>Masih nyampur nih klo pake strategi 1 atau 2 =&gt; yaudah kombinasikan aja kedua nya, jadi "#id .class" atau ".class #id"</li>
<li>Waduh masih ga bisa nih, saya maunya element yangÂ ke-4 dari filter 1-3 tadi =&gt; Oke tambahin posisi "#id li:nth-of-type(4)"</li>
<li>Tapi saya maunya element yang mengandung text tertentu =&gt; pake xpath klo gituÂ //button[text()[contains(.,'Sebut Saja Mawar')]]</li>
</ol>
<p>Di urutan 5 itu udah paling rawan banget deh, selector text emang bisa, tapi klo webnya support ganti bahasa bisa jadi ambyar itu loh. Lebih baik diobrolin lagi deh sama developer untuk mulai menuliskan identitas element yang kita mau jadi lebih unik lagi agar lebih testable.</p>
<p>Sebagai perbandingan, kita coba lihat web tokopedia, mereka memiliki element khusus yang memudahkan QA membuat locator yang stabil</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/33/contoh-tokopedia-element-data.jpg" alt="" width="1734" height="893">
<figcaption >Kode sumber Tokopedia menunjukan penggunaan data-testid sebagai penunjang selector strategy nya</figcaption>
</figure>
<p>Â </p>
<p>Data-* adalah attribute baru di HTML5 dan termasuk atribut yang valid, enaknya punya atribut khusus macam ini tuh klo ada perubahan desain di UI yang biasanya akan pakai ID atau CLASS, test nya akan tetap sama dan stabil karena tidak terganggu</p>
<p>Atau di bukalapak juga ada, bedanya disana pakai css class</p>
<figure class="post__image post__image--center" ><img src="https://fachrul.id/media/posts/33/contoh-element-qa-class-bukalapak.jpg" alt="" width="1281" height="888">
<figcaption >Kode sumberÂ Bukalapak menunjukan penggunaanÂ qa-* class sebagai penunjang selector strategy nya</figcaption>
</figure>
<h2 id="mcetoc_1e88bdnur5">Jadi gimana sebenarnya selector / locator yang baik?</h2>
<p>Kalau menurut saya, automation test menjadiÂ stabil, locator yang baik itu harus memenuhi kriteria seperti:</p>
<h4 id="mcetoc_1e88bdseo6">Sederhana</h4>
</div>
<div>Semakin pendek penulisan query selector semakin baik dan stabil, contoh nya "#first_name".Â  Jangan gunakan attribut atau class yang merujuk ke css formating seperti class="col-sm" atau id="83924csdj" yang tampak seperti di generate otomatis oleh JS lib</div>
<div>Â </div>
<h4 id="mcetoc_1e88be01g7">Mudah dibaca</h4>
<div>Jangan menulis query selector yang panjang ataupun sulit dibaca seperti:</div>
<ul>
<li>html/body/div[1]/section/div[1]/div/div/div/div[1]/div/div/div/div/div[3]/div[1]/div/h4[1]/b</li>
<li>//*[@id="wakwaw"]//child::label//following-sibling::input[1]</li>
</ul>
<div>Â </div>
<h4 id="mcetoc_1e88beg9k8">Semantic</h4>
<div>ArtinyaÂ query yang dipilih harus sesuai kan dengan maksud element tersebut artinya lebih baik menuliskan selector seperti ini "input#kampus" daripada hanya "#kampus" agar lebih jelas lagi saat membaca kode yang di maksud id="kampus" adalah sebuah element input bukan div ataupun button</div>
<div>Â </div>
<h2 id="mcetoc_1e88bep6h9">Jadi Kesimpulannya</h2>
<div>Selector strategy yang baik berperan besar terhadap stabilitas automation code kamu, jika aplikasi yang akan di test tidak memungkinkan membuat selector yang baik, artinya sudah waktunya mengangkat issue testablility aplikasi dengan developer ataupun stakeholder agar test menjadi lebih stabil maka diperlukan sedikit tunning lagi pada kode sumber aplikasinya<br>
<h2 id="mcetoc_1e88bf1rna">Â Rujukan lebih lanjut</h2>
<ul>
<li><a href="https://blog.mozilla.org/fxtesteng/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/">https://blog.mozilla.org/fxtesteng/2013/09/26/writing-reliable-locators-for-selenium-and-webdriver-tests/</a>Â </li>
<li><a href="https://www.guru99.com/locators-in-selenium-ide.html">https://www.guru99.com/locators-in-selenium-ide.html</a>Â </li>
<li><a href="https://www.guru99.com/xpath-selenium.html">https://www.guru99.com/xpath-selenium.html</a></li>
<li><a href="https://selenium-python.readthedocs.io/locating-elements.html">https://selenium-python.readthedocs.io/locating-elements.html</a></li>
<li><a href="https://gs.statcounter.com/browser-market-share">https://gs.statcounter.com/browser-market-share</a>Â Ternyata browser chrome masih paling banyak dipakai oleh orang seluruh dunia</li>
</ul>
<p>Â </p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Memulai Automation Test Selenium + Python (bagian 1)</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/"/>
        <id>https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/</id>

        <updated>2020-05-19T23:59:00+07:00</updated>
            <summary>
                <![CDATA[
                    Hi Kawan, Sesuai dengan post sebelumnya, pada kesempatan kali ini saya akan berbagi resep tentang membuat automation test framework dengan menggunakan bahasa pemrograman python + selenium, jadi di akhir sesi kamu pasti bisa membuat otomatisasi pengujian pada browser Google Chrome ya (kalau setup nya benar)&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Hi Kawan,</p>
<p>Sesuai dengan post sebelumnya, pada kesempatan kali ini saya akan berbagi resep tentang membuat automation test framework dengan menggunakan bahasa pemrograman python + selenium, jadi di akhir sesi kamu pasti bisa membuat otomatisasi pengujian pada browser Google Chrome ya (kalau setup nya benar) ðŸ˜…</p>
<h3 id="mcetoc_1e7uke56u0">Kenapa membuat tutorial automation test dengan python?</h3>
<p>Tujuannya saya buat tutorial kali ini adalah untuk memperkaya khasanah tutorial bahasa Indonesia pada automation test menggunakan bahasa pemrograman python, dimana mayoritas hasil penelusuran yang ada di gugle menggunakan bahasa pemrograman java ataupun javascript.</p>
<hr>
<p>Post ini merupakan rangkaian post mengenai membuat automationt test dengan python</p>
<h4 id="mcetoc_1e8mtsf4p6">Daftar isinya:</h4>
<ol>
<li><a href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/" target="_blank" rel="noopener noreferrer">Belajar Python dari dasar</a></li>
<li><a href="https://fachrul.id/belajar-pytest-framework-1/" target="_blank" rel="noopener noreferrer">Memahami cara kerja Pytest (bagian 1)</a>Â </li>
<li><a href="https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/" target="_blank" rel="noopener noreferrer">Mulai membuat automation test dengan Selenium</a>Â Â &lt;== Sekarang disini</li>
<li><a href="https://fachrul.id/selector-locator-strategy-yang-baik/" target="_blank" rel="noopener noreferrer">Menemukan Element dengan locator strategi yang baik</a>Â </li>
</ol>
<hr>
<p>Â </p>
<h2 id="mcetoc_1e7ukf4el1">Yuk kita mulai!!!</h2>
<p>Sebentar.. sebentar.. bentuk tutorial yang akan saya share adalah perpaduan dari video tutorial dan blog post, jadi kedua medium pembelajaran ini akan saling melengkapi, untuk video bisa diakses disini:</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/dApgg02293I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></p>
<p>Lalu catatan pada video akan merujuk pada postingan disini</p>
<h2 id="mcetoc_1e7uki6ad2">Tools yang digunakan</h2>
<p>Hal pertama yang kita perlukan adalah interpreter kode python sudah terinstall di laptop/komputer kamu, terlepas dari sistem operasi apapun (windows/macOS/linux) saya asumsikan command `python atau python3` bisa dijalankan di terminal/command line kamu ya, jika belum, silahkan merujuk ke post <a href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/" target="_blank" rel="noopener noreferrer">pendahuluan python saya sebelumnya disini</a></p>
<h3 id="mcetoc_1e7ukpuf33">Kode Editor</h3>
<p>Editor python ada banyak, dimulai dari yang ada di terminal seperti vim, kode editor ringan dan lengkap seperti:</p>
<ol>
<li><a href="https://www.sublimetext.com" target="_blank" rel="noopener noreferrer">sublime</a></li>
<li><a href="https://code.visualstudio.com" target="_blank" rel="noopener noreferrer">visual code</a></li>
<li><a href="https://atom.io" target="_blank" rel="noopener noreferrer">atom</a></li>
<li>ataupun IDE yang kumplit seperti <a href="https://www.jetbrains.com/education/download/" target="_blank" rel="noopener noreferrer">PyCharm Edu</a>.</li>
</ol>
<p>Sebagai pendamping dalam menulis kode python saya biasanya akan menginstal pula <a href="http://kite.com" target="_blank" rel="noopener noreferrer">Kite</a>Â sebagai tambahan autocomplete dan documentation di local tapi ini opsional sih, ga di install juga gapapa (ukuran file nya gede sih ahaha)</p>
<h3 id="mcetoc_1e7ul4jfl4">Chromedriver</h3>
<p>Bisa diunduh di :Â <a href="https://chromedriver.chromium.org/downloads">https://chromedriver.chromium.org/downloads</a>Â </p>
<p>Lalu tambahkan directory binary chromedriver ke sistem path kamu, (windows bisa taruh chromedriver.exe di folder c:\windows\System32 klo linux bisa tambahkan di path via ~/.bash_profile atau ~/.zshrc kamu. Atau klo macOS bisa lebih mudah tinggal jalankan perintah berikut di terminalÂ <code class="language-shell">brew cask install chromedriver</code></p>
<h3 id="mcetoc_1e7ule8i35">Â Python Packaging Tools</h3>
<p>Salah satu best practice pemrograman python adalah memiliki packaging tools yang menjadi depedency management library python agar tidak saling bertabrakan, jadi diperlukan virtual environment, kita akan menggunakan `pipenv` untuk itu, jalankan perintah berikut di terminal</p>
<pre><code class="language-shell-session"><span class="gp">$ pip install pipenv<br></span></code></pre>
<p>atau klo gagal karena km menggunakan python3 bisa menggunakan command `pip3 install pipenv`Â </p>
<p>Nah yuk kita mulai kodingnya.. Silahkan liat videonya ya</p>
<p>Skenario test yang dijalankan</p>
<pre><code class="language-gherkin">Scenario: Search Profile in Google</code><br><code class="language-gherkin">Given I am in google home page</code><br><code class="language-gherkin">When I search for "Fachrul Choliluddin"</code><br><code class="language-gherkin">Then I should see search result of "Fachrul Choliluddin"</code></pre>
<h2 id="mcetoc_1e84lvea30">Apa itu Selector?</h2>
<p><em>Selector</em>Â adalah sebuah format yang digunakan oleh library sepertiÂ <em>Selenium</em>Â danÂ <em>Capybara</em>Â untuk menemukan elemen pada web seperti gambar, tulisan, tombol, dan sebagainya. Untuk bisa menggunakanÂ <em>Selector</em>Â akan lebih baik jika anda mengenal HTML terlebih dahulu. Kamu bisa lihat materinyaÂ <a href="https://www.w3schools.com/html/" rel="nofollow">disini</a>.</p>
<h2 id="mcetoc_1e84lvv7e1">Apa itu CSS Selector?</h2>
<p><em>CSS</em>Â adalah sebuah notasi (<em>selector</em>) yang digunakan untuk menemukan elemen tertentu pada halaman web. CSS sendiri digunakan oleh web developer untuk memberikanÂ <em>style</em>Â pada halaman web seperti warna, besar dan lebar gambar, bentuk tombol, dan berbagai fungsi lainnya. Properti-properti pada CSS ini bisa kita manfaatkan untuk mendeteksi sebuah elemen pada web.</p>
<h2 id="mcetoc_1e84lvv7e2">Cara Menggunakan CSS selector</h2>
<p>Sebenarnya kita sudah menggunakan syntax CSS pada lesson sebelumnya. YaituÂ <code>#login_link</code>. Dimana kita memanfaatkan elemenÂ <code>id</code>Â pada tombol login untuk mendeteksi keberadaan tombol login.</p>
<p>Materi mengenai CSS sendiri sangat luas, sehingga kamu bisa baca mengenai CSS lebih lanjutÂ <a href="https://www.w3schools.com/css/" rel="nofollow">disini</a>.</p>
<h2 id="mcetoc_1e84m19cn7">Apa itu XPath?</h2>
<p><em>XPath</em>Â adalah sebuah notasi (<em>selector</em>) yang digunakan untuk menemukan elemen tertentu pada halaman web.Â <em>Xpath</em>Â memiliki bentuk syntax yang lebih fleksibel jika dibandingkan dengan CSS. Sehingga lebih umum digunakan untuk mencari elemen web yang tidak bisa dicari olehÂ <em>selector</em>Â CSS.</p>
<h2 id="mcetoc_1e84m1dkp8">Mengapa Memakai XPath?</h2>
<p>Misalkan saya punya halaman web dengan format HTML seperti ini ...</p>
<div class="highlight highlight-text-html-basic">
<pre>&lt;<span class="pl-ent">div</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>parent<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">h2</span>&gt;Ayam&lt;/<span class="pl-ent">h2</span>&gt;
    &lt;<span class="pl-ent">p</span>&gt;Ayam adalah salah satu unggas yang bisa dimakan&lt;/<span class="pl-ent">p</span>&gt;
    &lt;<span class="pl-ent">div</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>child<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">h3</span>&gt;Gambar Ayam&lt;/<span class="pl-ent">h3</span>&gt;
        &lt;<span class="pl-ent">img</span> <span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>ayam_image<span class="pl-pds">"</span></span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">"</span>ayam.jpg<span class="pl-pds">"</span></span> <span class="pl-e">alt</span>=<span class="pl-s"><span class="pl-pds">"</span>Smiley face<span class="pl-pds">"</span></span> <span class="pl-e">height</span>=<span class="pl-s"><span class="pl-pds">"</span>42<span class="pl-pds">"</span></span> <span class="pl-e">width</span>=<span class="pl-s"><span class="pl-pds">"</span>42<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">p</span>&gt;Ini adalah gambar ayam&lt;/<span class="pl-ent">p</span>&gt;
    &lt;/<span class="pl-ent">div</span>&gt;
&lt;/<span class="pl-ent">div</span>&gt;</pre>
</div>
<p>Anda bisa menggunakanÂ <em>selector</em>Â CSS untuk mengambil elemen image dengan cara seperti ini.</p>
<div class="highlight highlight-source-ruby">
<pre>driver.find_element_by_css_selector(<span class="pl-s"><span class="pl-pds">'</span>#ayam_image<span class="pl-pds">'</span></span>)</pre>
</div>
<p>Atau menggunakan XPath dengan cara berikut</p>
<div class="highlight highlight-source-ruby">
<pre>driver.find_element_xpath(<span class="pl-pds">'</span>//img<span class="pl-pds">'</span>)</pre>
</div>
<p>Atau</p>
<div class="highlight highlight-source-ruby">
<pre>driver.find_element(by=By.XPATH, value=<span class="pl-pds">'</span>//*[@id="ayam_image"]<span class="pl-pds">'</span>)</pre>
</div>
<p>Â </p>
<div class="highlight highlight-source-ruby">Â </div>
<p>Dan sebagainya ...</p>
<p>Intinya,Â <em>XPath</em>Â menawarkan banyak metode alternatif untuk mencari suatu elemen pada halaman web.</p>
<p>Materi mengenaiÂ <em>XPath</em>Â sendiri sangat luas, sehingga kamu bisa baca mengenai CSS lebih lanjutÂ <a href="https://www.w3schools.com/xml/xpath_intro.asp" rel="nofollow">disini</a>.</p>
<h2 id="mcetoc_1e84lvv7e5">Perbandingan CSS vs xPath</h2>
<table>
<thead>
<tr>
<th>XPath</th>
<th>Css</th>
</tr>
</thead>
<tbody>
<tr>
<td>//div/a</td>
<td>div &gt; a</td>
</tr>
<tr>
<td>//div//a</td>
<td>div a</td>
</tr>
<tr>
<td>//div[@id='example']</td>
<td>#example</td>
</tr>
<tr>
<td>//div[@class='example']</td>
<td>.example</td>
</tr>
<tr>
<td>//input[@id='username']/following-sibling::input[1]</td>
<td>#username + input</td>
</tr>
<tr>
<td>//input[@name='username']</td>
<td>input[name='username']</td>
</tr>
<tr>
<td>//input[@name='login'and @type='submit']</td>
<td>input[name='login'][type='submit']</td>
</tr>
<tr>
<td>a[contains(text(), 'Log out')]</td>
<td>a:contains('Log Out')</td>
</tr>
<tr>
<td>Â </td>
<td>#recordlist li:nth-of-type(4)</td>
</tr>
<tr>
<td>Â </td>
<td>Â a[id^='id_prefix_']</td>
</tr>
<tr>
<td>Â </td>
<td>Â a[id$='_id_sufix']</td>
</tr>
<tr>
<td>Â </td>
<td>Â a[id*='id_pattern']</td>
</tr>
<tr>
<td>Â </td>
<td>Â </td>
</tr>
</tbody>
</table>
<p>Â </p>
<p>Command yang dijalankan:<br><br></p>
<table style="width: 681px;">
<tbody>
<tr>
<td style="width: 280.984px;">âžœ pipenv --three</td>
<td style="width: 399.016px;">Inisiasi directory sebagai virtual environment yang baru dengan python3</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pipenv shell</td>
<td style="width: 399.016px;">mengaktivasi virtual environment</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pip freeze</td>
<td style="width: 399.016px;">melihat daftar isi library yang sudah di terpasang di virtual environmentÂ </td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pipenv install selenium</td>
<td style="width: 399.016px;">memasang library selenium</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pipenv install pytest</td>
<td style="width: 399.016px;">memasang library pytest</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ chromedriver -v</td>
<td style="width: 399.016px;">cek versi chromedriver</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ python test_googling.py</td>
<td style="width: 399.016px;">menjalankan kode python</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pytest</td>
<td style="width: 399.016px;">menjalankan module pytest di directory aktif</td>
</tr>
<tr>
<td style="width: 280.984px;">âžœ pytest -s</td>
<td style="width: 399.016px;">menjalankan pytest disertai stdout untuk print console</td>
</tr>
</tbody>
</table>
<p>Â Link terkait:</p>
<table style="width: 681px;">
<tbody>
<tr>
<td style="width: 339.984px;"><a href="https://selenium-python.readthedocs.io">https://selenium-python.readthedocs.io</a>Â </td>
<td style="width: 340.016px;">DokumentasiÂ library selenium pada python</td>
</tr>
<tr>
<td style="width: 339.984px;"><a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a>Â </td>
<td style="width: 340.016px;">Dokumentasi pytestÂ </td>
</tr>
<tr>
<td style="width: 339.984px;">Â </td>
<td style="width: 340.016px;">Â </td>
</tr>
</tbody>
</table>
<p>Â </p>
<br>
<p>Â </p>
<p>Â </p>
<p>Â </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mau Belajar Automation Test dengan Python, Mulai Dari Mana?</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/"/>
        <id>https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/</id>

        <updated>2020-05-19T23:59:51+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/31/belajar-python.jpg" alt="Belajar python untuk automation test" />
                    Halo Kawan! Dikesempatan kali ini saya akan bahas hal teknis yang berhubungan dengan pekerjaan sebagai Software Quality Assurance / Test Engineer yaitu membuat sebuah Test Automation Suite,Â saya akan membagikan pengetahuan dan pengalaman saya dalam merancang Automation test framework dengan python. Saya akan buat tulisan berseri&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/31/belajar-python.jpg" alt="Belajar python untuk automation test" />
                <p>Halo Kawan!</p>
<p>Dikesempatan kali ini saya akan bahas hal teknis yang berhubungan dengan pekerjaan sebagai <em>Software Quality Assurance</em> / <em>Test Engineer</em> yaitu membuat sebuah <em>Test Automation Suite</em>,Â saya akan membagikan pengetahuan dan pengalaman saya dalam merancang Automation test framework dengan python.</p>
<p>Saya akan buat tulisan berseri terkait pemrograman <em>automation test</em> dengan python, nah sebagai permulaan, pada tulisan ini saya akan share sumber belajar python dari dasar yang dulu saya pelajari, semoga bisa berguna buat yang baru berkenalan dengan bahasa python ya.</p>
<p>Nanti setelah dasar pemrograman python dikuasai, barulah kita akan langsung koding automation nya ya</p>
<h2 id="mcetoc_1e7nsdtta3">Kenapa Python?</h2>
<p>Karena menulis automation code dengan python menurut saya sangat mudah sekali, dan secara bahasa pemrograman, python itu termasuk mudah untuk dipelajari dan code yang dihasilkan sangat enak untuk dibaca, jadi sebagai entry barrier nya rendah bagi seorang QA manual untuk mulai terjun di koding automation (walaupun tools lain yang ga perlu koding juga ada sih ðŸ¤£)</p>
<h2 id="mcetoc_1e7nsonlk4">Yuk kita Mulai Belajar Pemrograman Python</h2>
<p>Walaupun ingin, sepertinya saya kurang mahir dalam menjelaskan pemrograman python dengan baik, karena saya sendiri pun tidak terlalu mahir, hehe tapi santai saja, keahlian koding yang dibutuhkan untuk menulis automation test itu tidak terlalu kompleks kok, jadi bisa langsung sambil di praktekan ya.</p>
<p>Ok, berikut ini adalah sumber pembelajaran python yang sudah saya coba dan menjadi rekomendasi utama, terutama karena gratis dan mudah dipahami,Â saya bagi kedalam beberapa kategori ya sesuai dengan gaya belajar kita yang berbeda, ada yang sukanya audio visual, ada yang lebih suka belajar dengan membaca, atau ada yang paling seneng kalo langsung praktek.</p>
<h2 id="mcetoc_1e7ns8n9b0">Belajar Python Melalui Video</h2>
<p>Hari gini banyak video tutorial gratis di youtube, saking banyaknya mungkin kalian akan menemukan video tutorial yang jumlahnya sangat banyak, berikut ini adalah beberapa video yang sudah saya tonton dan isinya sangat bermutu, jadi akan menghemat waktu kalian memilih video mana yang akan ditonton ya</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/zpeWE1utrWM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></p>
<p>dengan playlist lengkap dari sekolah koding di:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLCZlgfAG0GXDc9Wcsi2fUn0pAr41GDL6m" target="_blank" rel="noopener noreferrer">Tutorial Python Bahasa Indonesia</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCZlgfAG0GXC-N-MlNJoG3Jh8nhXHTT6s" target="_blank" rel="noopener noreferrer">Belajar OOP (object oriented programming) dengan Python</a></li>
</ul>
<p>Disini juga lumayan lengkap dari pengenalan pemrograman bahkan</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/fBkeaYZ99iY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>Â </p>
<p>Dan aplikasi pembelajaran koding ini juga bagus loh</p>
<figure class="post__image post__image" ><img src="https://fachrul.id/media/posts/31/belajar-koding-python-di-kode-id.png" alt="" width="800" height="863">
<figcaption >Kelas pemrograman gratis dari Kode.id</figcaption>
</figure>
<p>Dengan link nya sebagai berikut <a href="https://kode.id/kelas/pengenalan-bahasa-pemrograman-python/" target="_blank" rel="noopener noreferrer">https://kode.id/kelas/pengenalan-bahasa-pemrograman-python/</a>Â ,Â bisa diakses melalui browser komputer ataupun aplikasi mobile nya juga lohÂ </p>
<h2 id="mcetoc_1e7ns9skn1">Belajar Python Melalui Buku</h2>
<p>Berikut ini adalah sumber belajar bacaan (buku ataupun web, ya kan dibaca juga ðŸ˜…)</p>
<h3 id="mcetoc_1e7nv1kr75">BelajarPython.com</h3>
<p>Kamu bisa akses di halamanÂ <a href="https://belajarpython.com/tutorial/apa-itu-python" target="_blank" rel="noopener noreferrer">https://belajarpython.com</a>Â disana kamu bisa menemukan tutorial python dengan pembahasan yang mudah dimengerti</p>
<p><img class="post__image--center" src="https://fachrul.id/media/posts/31/Screen-Shot-2020-05-07-at-23.20.31.png" alt="" width="750" height="974"></p>
<h3 id="mcetoc_1e7nv646u7">Workshop Python 101</h3>
<p>Modul untuk workshop python, bisa kamu akses diÂ <a href="https://sakti.github.io/python101/index.html">https://sakti.github.io/python101/index.html</a> kamu ikutin sendiri kok, tapi bahasannya menggunakan python versi 2.7 dimana sekarang ini sudah ketinggalan (walau masih bisa) dan direkomendasikan untuk menggunakan python versi 3Â </p>
<h3 id="mcetoc_1e7nv4kpe6">GoalKicker</h3>
<p>Buku ini salah satu rekomendasi saya untuk belajar python dengan cepat, karena disana ga terlalu banyak basa-basi dan langsung ditunjukan contoh kode nya, bisa diunduh di link <a href="https://goalkicker.com/PythonBook/" target="_blank" rel="noopener noreferrer">https://goalkicker.com/PythonBook/</a></p>
<p><a href="https://goalkicker.com/PythonBook/"><img class="post__image--center" src="https://fachrul.id/media/posts/31/Screen-Shot-2020-05-07-at-23.14.57.png" width="340" height="490"></a></p>
<p>Buku python lainnya bisa diakses di:Â <a href="https://pythonbooks.revolunet.com/">https://pythonbooks.revolunet.com/</a></p>
<h2 id="mcetoc_1e7nvl66aa">Â </h2>
<h2 id="mcetoc_1e7ns9uql2">Belajar Python Dengan Praktek</h2>
<p>Nah bagi kalian yang pengennya langsung praktek ngerjain kode bisa dicoba cara berikut ini</p>
<h3 id="mcetoc_1e7nvdpod8">Python Koans</h3>
<p>Nah Koans adalah metode pembelajaran interaktif dengan langsung menjalankan kodenya, jadi kamu tinggal clone repositoryÂ Â <a href="https://github.com/gregmalcolm/python_koans">https://github.com/gregmalcolm/python_koans</a>Â lalu jalankan kodenya, dan perbaiki yang salah, bisa di baca juga struktur kodenya langsung</p>
<h3 id="mcetoc_1e7nviakg9">SoloLearn</h3>
<p>Enaknya belajar di soloLearn adalah bisa dimana aja, web bisa mobile phone juga bisa, bentuknya seperti kuis interaktifÂ <a href="https://www.sololearn.com/Course/Python/">https://www.sololearn.com/Course/Python/</a></p>
<h4 id="mcetoc_1e7o0jj190">Â PyCharm Edu</h4>
<p>Ini favorit saya, karena embeded di IDE nya python yaitu PyCharm, kita tinggal mengaktifkannya dari <a href="https://www.jetbrains.com/education/download/" target="_blank" rel="noopener noreferrer">Pycharm Edu</a> (ini IDE python gratis loh, dan sangat mumpuni) silahkan unduh Pycharm Edu gratis disini <a href="https://www.jetbrains.com/education/download/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/education/download/</a>Â lalu install "EduTools Plugin" nya juga ya untuk mengaktifkan menu Academy seperti berikut</p>
<p><img class="post__image--center" src="https://fachrul.id/media/posts/31/Screen-Shot-2020-05-07-at-23.47.10.png" width="600" height="996"></p>
<p>Info lebih lanjut bisa cekidot ini yaÂ <a href="https://hyperskill.org/onboarding?track=python" target="_blank" rel="noopener noreferrer">https://hyperskill.org/onboarding?track=python</a></p>
<p>Â </p>
<h2 id="mcetoc_1e7o0rrqg1">Penutup</h2>
<p>Ternyata lumayan banyak juga ya sumber belajar python nya, semoga kalian bisa mengikuti salah satunya dengan tuntas ya ðŸ¤£</p>
<p>Oke di kesempatan berikutnya kita akan langsung mulai belajar automation test dengan python nya ya, untuk sementara ini mulailah dengan memahami bahasa pemrograman Python.. Sekian</p>
<hr>
<p>Post ini merupakan rangkaian post mengenai membuat automationt test dengan python</p>
<h4 id="mcetoc_1e8mtsf4p6">Daftar isinya:</h4>
<ol>
<li><a href="https://fachrul.id/mau-belajar-automation-test-dengan-python-mulai-dari-mana/" target="_blank" rel="noopener noreferrer">Belajar Python dari dasar</a>Â &lt;== Sekarang disini</li>
<li><a href="https://fachrul.id/belajar-pytest-framework-1/" target="_blank" rel="noopener noreferrer">Memahami cara kerja Pytest (bagian 1)</a>Â </li>
<li><a href="https://fachrul.id/memulai-automation-test-selenium-python-bagian-1/" target="_blank" rel="noopener noreferrer">Mulai membuat automation test dengan Selenium</a>Â Â </li>
<li><a href="https://fachrul.id/selector-locator-strategy-yang-baik/" target="_blank" rel="noopener noreferrer">Menemukan Element dengan locator strategi yang baik</a>Â </li>
</ol>
<hr>
<p>Â </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Catat ini! berbagai command ADB yang berguna untuk automation tester</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/catat-ini-berbagai-command-adb-yang-berguna-untuk-automation-tester/"/>
        <id>https://fachrul.id/catat-ini-berbagai-command-adb-yang-berguna-untuk-automation-tester/</id>

        <updated>2020-06-12T14:51:23+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/30/ADB.png" alt="" />
                    Hallo Para Penguji Aplikasi Digital! Pada saat saya mengembangkan kode automation untuk android, seringkali saya menemukan command penting dan berguna dalam membantu automation code saya dan saya simpan di snippet microsoft oneNote, dan setelah dipikir-pikir sangat mubazir kalo catatan itu saya simpan sendiri, jadi pada&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/30/ADB.png" alt="" />
                <p>Hallo Para Penguji Aplikasi Digital!</p>
<p>Pada saat saya mengembangkan kode automation untuk android, seringkali saya menemukan command penting dan berguna dalam membantu automation code saya dan saya simpan di snippet microsoft oneNote, dan setelah dipikir-pikir sangat mubazir kalo catatan itu saya simpan sendiri, jadi pada kesempatan kali ini akan saya tuliskan disini command Android Debug Bridge (ADB) apa saja yang bisa membantu pengujian kita</p>
<h2 id="mcetoc_1e6qomc7p0">Buka kunci Ponsel</h2>
<pre><code class="language-bash">adb shell input keyevent  # idupin HP<br>adb shell input text yourpasscode  # Masukin PIN <br>adb shell input keyevent KEYCODE_ENTER   # tekan enter</code></pre>
<h2 id="mcetoc_1e6qomfjh1">Toggle status bar</h2>
<pre><code class="language-bash">#pull status bar
adb shell service call statusbar 1
#collapse status bar
adb shell service call statusbar 2</code></pre>
<h2 id="mcetoc_1e6qomirn2">Buka/tutup app</h2>
<pre><code class="language-bash">#open app : <br>adb shell monkey -p id.fachrul.packagename 1
<br># Open gmail <br>adb shell monkey -p com.google.android.gm 1
#close app :<br>adb shell am force-stop packagename
# Close gmail 
adb shell am force-stop com.google.android.gm</code></pre>
<h2 id="mcetoc_1e6qommh03">Â Tap di aplikasi</h2>
<pre><code class="language-shell">adb shell input tap x y</code></pre>
<p>nah `x y` itu koordinat sumbu X dan Y, gimana cara dapetinnya?</p>
<pre><code class="language-shell language-shell-session"># dump the current screen ui</code><br><code class="language-shell language-shell-session">adb shell uiautomator dump</code><br><code class="language-shell language-shell-session"># copy the xml file to computer </code><br><code class="language-shell language-shell-session">adb pull sdcard/window_dump.xml ~/Desktop/</code><br><code class="language-shell language-shell-session"># atau gini juga bisa</code><br><code class="language-shell language-shell-session">adb pull $(adb shell uiautomator dump | grep -oP '[^ ]+.xml') /sdcard/window_dump.xml</code></pre>
<p>trus cek attribut "bounds" di element yang kita mau buat dapetin koordinatnya, hint: bisa juga sih dapetin koordinat dari uiautomatorviewer :D</p>
<h2 id="mcetoc_1e6qomqn04">Install aplikasi langsung</h2>
<pre><code class="language-shell">adb install -r namafile.apk</code></pre>
<p>bisa ditambahin argument</p>
<pre><code class="language-shell">adb -d = untuk device, <br>adb -e = utk emulator, <br>adb -s = untuk ke serial number tertentu<br></code></pre>
<p>atau klo mau sekaligus install apk di banyak devicesÂ </p>
<pre><code class="language-shell">alias apkinstall="adb devices | tail -n +2 | cut -sf 1 | xargs -I X adb -s X install -r $1"</code><br><br><code class="language-shell"># Penggunaannya Install an apk on all devices</code><br><code class="language-shell">apkinstall ~/Downloads/MyAppRelease.apkÂ  <br><br># atau klo cuma mau copy files apk nya doank<br>adb push &lt;lokasi file path&gt; /sdcard/<br></code></pre>
<h2 id="mcetoc_1e6qon7gl5">Hapus aplikasi</h2>
<pre><code class="language-shell-session">adb shell pm uninstall com.example.MyApp     <br>adb shell pm clear id.fachrul.package // Deletes all data associated with a package.</code></pre>
<p>Â </p>
<h2 id="mcetoc_1e6qonajm6">Buka aktivity langsung</h2>
<pre><code class="language-shell-session">adb shell am start -W -n com.gojek.life/com.gojek.golife.presentation.feature.LifeSplashActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000</code></pre>
<p>Apa nama activity sekarang ini (lagi dibuka/focus)</p>
<pre><code class="language-shell-session">adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'</code>Â </pre>
<h2 id="mcetoc_1e6qonf7v7">Monkey test</h2>
<pre><code class="language-shell">adb shell monkey -p &lt;nama package&gt; -v --pct-syskeys 0 3000</code><br><br><code class="language-shell">adb shell monkey -p com.myAppPackage -v 10000 -s 100 // monkey tool is generating 10.000 random events on the real device</code></pre>
<h2 id="mcetoc_1e6qonlc38">Filter adb log dengan lebih indah</h2>
<pre><code class="language-shell">pidcat &lt;nama package&gt;</code></pre>
<p>nah pidcat ini adalah aplikasi tambahan based on python script, bisa di install mengikuti petunjuk <a href="https://github.com/JakeWharton/pidcat/blob/master/README.md" target="_blank" rel="noopener noreferrer">disini</a>Â </p>
<h2 id="mcetoc_1e6qonotm9">Hapus log device</h2>
<pre><code class="language-shell">adb logcat -c</code></pre>
<h2 id="mcetoc_1e6qonu54a">Ambil bug report berupa informasi dari device, dumpstate, dumpsys dan logcat output</h2>
<pre><code class="language-css language-javascript language-shell">adb bugreport &gt; path_file_nya<br>adb logcat -b crashÂ <br></code></pre>
<h2 id="mcetoc_1eajnp4n81">Ambil screenshoot</h2>
<pre class="wp-block-code">adb exec-out screencap -p &gt; &lt;nama_sshot&gt;.png</pre>
<h2 id="mcetoc_1eajnp4s92">Â </h2>
<h2 id="mcetoc_1e6qoo9omc">Open deeplink</h2>
<p><code class="language-shell">adb shell am start -a android.intent.action.VIEW -d "schema://link"</code></p>
<h2 id="mcetoc_1e6qood6ad">Reset permissions</h2>
<pre><code class="language-shell">adb shell pm reset-permissions -p your.app.package</code></pre>
<h2 id="mcetoc_1e6qoog3me">Kasih permission</h2>
<pre><code class="language-shell-session">adb shell pmÂ grantÂ your.app.package</code></pre>
<h2 id="mcetoc_1e6qoomaof">Key event</h2>
<pre><code class="language-shell-session">adb shell input keyevent 3 // Home btn<br>adb shell input keyevent 4 // Back btn<br><br>adb shell input keyevent 5 // Call<br><br>adb shell input keyevent 6 // End call<br><br>adb shell input keyevent 26Â  // Turn Android device ON and OFF. It will toggle device to on/off status.<br><br>adb shell input keyevent 27 // Camera<br><br>adb shell input keyevent 64 // Open browser<br><br>adb shell input keyevent 66 // Enter<br><br>adb shell input keyevent 67 // Delete (backspace)<br><br>adb shell input keyevent 207 // Contacts<br><br>adb shell input keyevent 220 / 221 // Brightness down/up<br><br>adb shell input keyevent 277 / 278 /279 // Cut/Copy/Paste<br><br>// https://developer.android.com/reference/android/view/KeyEvent.html<br><br><br></code></pre>
<p><code></code>AmbilÂ serial dariÂ connected device</p>
<pre><code class="language-shell-session">adb devices | tail -n +2</code>Â </pre>
<h2 id="mcetoc_1eajnnqvv0">Emulator</h2>
<pre class="wp-block-code">emulator -avd &lt;nama emulatornya&gt; -netdelay none -netspeed fullÂ </pre>
<h2 id="mcetoc_1eajnrqt03">Â Cara menampilkan screen android di Windows/mac/linux (cocok buat presentasi)</h2>
<p>Bisa menggunakan aplikasi <a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener noreferrer">Scrcpy</a>Â aplikasi ini open source jadi bisa menjadi alternatif kamu yang biasa menggunakan Vysor, klo pake mac bisa langsung instal via `brew install scrcpy` trus jalanin nya tinggal jalanin command `scrcpy` atau klo mau lihat dia bisa ngapain aja bisa cekidot `scrcpy --help`</p>
<pre>scrcpy --help<br># mulai mirroring android, tapi tampilin juga lokasi sentuhan<br>scrcpy -t<br># mirroring android sambil direkam<br>scrcpy -r coba_health.mp4<br># klo ada lebih dari satu, bisa konek sesuai dengan serial device nya<br>scrcpy -s serial_1234<br><br></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Perintah Git yang berguna tapi jarang yang tahu</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/perintah-git-yang-berguna-tapi-jarang-yang-tahu/"/>
        <id>https://fachrul.id/perintah-git-yang-berguna-tapi-jarang-yang-tahu/</id>

        <updated>2020-05-06T15:44:32+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://fachrul.id/media/posts/29/coding-computer-data-depth-of-field-577585.jpg" alt="" />
                    GIT? tools andalan dalam kolaborasi pengembangan perangkat lunak yang banyak dari kita sudah familiar dan bahkan menggunakan nya sehari-hari. Tapi buat saya pribadi seringkali cuma pake git commit, git push, git merge doank ahaha, ada beberapa command yg penting dan berguna sebenernya yang bisa sangat&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://fachrul.id/media/posts/29/coding-computer-data-depth-of-field-577585.jpg" alt="" />
                <p>GIT? tools andalan dalam kolaborasi pengembangan perangkat lunak yang banyak dari kita sudah familiar dan bahkan menggunakan nya sehari-hari. Tapi buat saya pribadi seringkali cuma pake git commit, git push, git merge doank ahaha, ada beberapa command yg penting dan berguna sebenernya yang bisa sangat memudahkan kita dan ternyata banyak orang yang tahu juga</p>
<h2 id="mcetoc_1e6qmq1h30">Mengurutkan Branch berdasarkan tanggal</h2>
<pre class="  language-bash"><code class="  language-bash"><span class="token function">git</span> branch --sort<span class="token operator">=</span>-committerdate</code>Â </pre>
<h2 id="mcetoc_1e6qmqu5j1">Pindah ke Branch sebelumnya</h2>
<pre class="  language-bash"><code class="  language-bash"><span class="token function">git</span> checkout -</code></pre>
<h2 id="mcetoc_1e6qmr2ge2">Menampilkan informasi komit terakhir dari semua branch</h2>
<pre class="  language-bash"><code class="  language-bash language-shell-session"><span class="token function">git branch -v<br>git</span> branch -vv  # kalo mau sama informasi upstream remote branch nya sekalian</code></pre>
<h2 id="mcetoc_1e6qmr6vg3">Ambil perubahan suatu file di branch lain</h2>
<pre class="  language-bash"><code class="  language-bash"><span class="token function">git</span> checkout feature/branch-lain -- fileyangkitamau.txt</code></pre>
<h2 id="mcetoc_1e6qmrb614">Melihat status Git dengan lebih ringkas</h2>
<p>kadang kita cuma menjalankan command `git status` untuk melihat file apa aja yang mengalami perubahan atau penambahan files. sebagai alternatif untuk informasi perubahan files dengan lebih ringkas kita bisa menjalankan:</p>
<pre class="  language-bash"><code class="  language-bash"><span class="token function">git</span> status -sb</code></pre>
<h2 id="mcetoc_1e6qmrjff5">Menelusuri file yang hilang</h2>
<pre class="  language-bash"><code class="  language-bash"><span class="token function">git</span> log -- missing_file.txt</code></pre>
<h2 id="mcetoc_1e6qmrnc76">SiapaÂ Commiter paling <span style="text-decoration: line-through;">rajin</span> banyak</h2>
<p>Buat lucu-lucuan aja di urutin siapa commiter paling banyak</p>
<pre class="highlight"><code class="language-bash">git shortlog -sn --all --no-merges</code></pre>
<p>atau klo mau lebih spesifik lagi bisa ditambahin tempo nya</p>
<pre class="highlight"><code class="language-bash">git shortlog -sn --since='10 weeks' --until='2 weeks'</code></pre>
<h2 id="mcetoc_1e6qmsm137">Siapa nih yg ubah file dan line tertentu</h2>
<pre class="highlight"><code class="language-bash">git blame -L5,10 .gitlab-ci.yml</code></pre>
<h2 id="mcetoc_1e6qmsr888">Daripada nunjukin line yang berubah mending minta tunjukin kata yang berubah</h2>
<pre class="highlight"><code class="language-bash">git diff --word-diff</code></pre>
<h2 id="mcetoc_1e6qmsvj59">Melihat branch mana saja yang akhir-akhir ini kita kerjakan</h2>
<p>Kadang terlalu banyak lompat branch jadi suka tersesat sendiri dan bingung mau mulai darimana</p>
<pre class="highlight"><code class="language-bash">git for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"</code></pre>
<p>kalo terlalu ribet hapal nya tinggal bikin alias jadi `git recent` sih</p>
<h2 id="mcetoc_1e6qmt3oia">Lagi pada ngerjain apaan sih?</h2>
<p>buat tim leader biasanya penting untuk ngecek sesekali dari apa yang dikerjain tim kita di repo, sebenernya bisa aja liat di git commit di gitlab/github nya sih, tapi klo lagi di terminal bisa langsung di eksekusi aja command ini</p>
<pre class="highlight"><code class="language-bash">git log --all --oneline --no-merges</code></pre>
<p>atau klo mau ada pembatas waktu bisa ditambahin argument since: days/weeks</p>
<pre class="highlight"><code class="language-bash">git log --all --since='3 days' --oneline --no-merges</code></pre>
<p>Trus klo mau cek orang tertentu bisa pake gini</p>
<pre class="highlight"><code class="language-bash">git log --all --oneline --no-merges --author=&lt;email address&gt;<br></code></pre>
<pre class="highlight"><code class="language-bash">git log --since=00:00:00 --all --no-merges --oneline --author=&lt;email address&gt;</code></pre>
<h2 id="mcetoc_1e6qmtcp3b">Melihat logs yang kompleks dengan grafisÂ </h2>
<pre class="highlight"><code class="language-bash">git log --graph --all --decorate --stat --date=iso</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Ulasan Pekan Ini - 18 Oktober 2019</title>
        <author>
            <name>Fachrul Choliluddin</name>
        </author>
        <link href="https://fachrul.id/ulasan-pekan-ini-18-oktober-2019/"/>
        <id>https://fachrul.id/ulasan-pekan-ini-18-oktober-2019/</id>

        <updated>2019-10-19T22:58:53+07:00</updated>
            <summary>
                <![CDATA[
                    Hi, lama tak berjumpa! Mohon maaf baru menulis lagi, karena habis migrasi ke laptop baruÂ ðŸ˜… #ciee Dengan dipersenjatai macbook pro yang lebih mumpuni harusnya makin semangat bikin konten nih!!! tapi kenyataannya akhir-akhir ini malah sibuk ngurusin kerjaan, hufft Oke dikesempatan kali ini tagar post #retrospective&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Hi, lama tak berjumpa!</p>
<p>Mohon maaf baru menulis lagi, karena habis migrasi ke laptop baruÂ ðŸ˜… #ciee</p>
<p>Dengan dipersenjatai macbook pro yang lebih mumpuni harusnya makin semangat bikin konten nih!!! tapi kenyataannya akhir-akhir ini malah sibuk ngurusin kerjaan, hufft</p>
<p>Oke dikesempatan kali ini tagar post #retrospective saya ubah menjadi judul "Ulasan Pekan ini" karena simple judulnya, klo ada kata retrospective keknya terlalu keren ahahaÂ ðŸ¤£, tapi isinya sama kok, kalem aja!</p>
<p>Oke kita mulai ulasan hal-hal menarik pekan ini:</p>
<h2 id="mcetoc_1dniasf450">Perkakas</h2>
<p>ada sumber alat bantu kerja yang baru nih, diÂ <a href="https://file-examples.com/">https://file-examples.com/</a>Â kita bisa unduh file sampling berupa video, audio, document, gambar ataupun file jenis lainya untuk kebutuhan testing, khususnya upload file, jadi bisa nyari file yg ukurannya, resolusinya ataupun ekstensi nya sesuai dengan skenario test yang kita mau.</p>
<h2 id="mcetoc_1dnib17731">Bacaan</h2>
<p>Rekomendasi bacaan pekan ini:</p>
<ul>
<li>BahasanÂ penulisan automation test code yang baik ga perlu sesuai prinsip clean code banget.Â <strong>Good production code is well-factored; good test code isÂ <em>obvious</em>.</strong>Â <a href="https://mtlynch.io/good-developers-bad-tests/">https://mtlynch.io/good-developers-bad-tests/</a></li>
<li>Pandangan mengenai value testing yang baik pada timÂ <a href="https://www.techwell.com/techwell-insights/2018/11/cost-software-testing">https://www.techwell.com/techwell-insights/2018/11/cost-software-testing</a></li>
<li>Perihal penulisan pytest code yg baikÂ <a href="https://raphael.codes/blog/customizing-your-pytest-test-suite-part-1/">https://raphael.codes/blog/customizing-your-pytest-test-suite-part-1/</a>Â danÂ <a href="https://raphael.codes/blog/customizing-your-pytest-test-suite-part-2/">https://raphael.codes/blog/customizing-your-pytest-test-suite-part-2/</a></li>
</ul>
<h2 id="mcetoc_1dnib8ffc2">Tontonan</h2>
<p>Mengulang lagi video bagus dari Angie Jones untuk menentukan skenario test mana yang layak untuk di automate</p>
<h2 id="mcetoc_1dnibbbqh3"><iframe width="560" height="315" src="https://www.youtube.com/embed/VL-_pnICmGY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></h2>
<h2 id="mcetoc_1dnibbbqh4">Siniar (podcast)</h2>
<p>Imre bahas soal sudut pandang venture capital melihat profile founder startup dalam proses pendanaan</p>
<iframe width="100%" height="232" src="https://open.spotify.com/embed-podcast/episode/2OrRTC0IVADVz3UpBaD6wM" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>
<p>Â </p>
            ]]>
        </content>
    </entry>
</feed>
